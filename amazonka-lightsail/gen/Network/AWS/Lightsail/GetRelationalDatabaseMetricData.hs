{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE StrictData #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.Lightsail.GetRelationalDatabaseMetricData
-- Copyright   : (c) 2013-2021 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Returns the data points of the specified metric for a database in Amazon
-- Lightsail.
--
-- Metrics report the utilization of your resources, and the error counts
-- generated by them. Monitor and collect metric data regularly to maintain
-- the reliability, availability, and performance of your resources.
module Network.AWS.Lightsail.GetRelationalDatabaseMetricData
  ( -- * Creating a Request
    GetRelationalDatabaseMetricData (..),
    newGetRelationalDatabaseMetricData,

    -- * Request Lenses
    getRelationalDatabaseMetricData_relationalDatabaseName,
    getRelationalDatabaseMetricData_metricName,
    getRelationalDatabaseMetricData_period,
    getRelationalDatabaseMetricData_startTime,
    getRelationalDatabaseMetricData_endTime,
    getRelationalDatabaseMetricData_unit,
    getRelationalDatabaseMetricData_statistics,

    -- * Destructuring the Response
    GetRelationalDatabaseMetricDataResponse (..),
    newGetRelationalDatabaseMetricDataResponse,

    -- * Response Lenses
    getRelationalDatabaseMetricDataResponse_metricName,
    getRelationalDatabaseMetricDataResponse_metricData,
    getRelationalDatabaseMetricDataResponse_httpStatus,
  )
where

import qualified Network.AWS.Core as Core
import qualified Network.AWS.Lens as Lens
import Network.AWS.Lightsail.Types
import qualified Network.AWS.Request as Request
import qualified Network.AWS.Response as Response

-- | /See:/ 'newGetRelationalDatabaseMetricData' smart constructor.
data GetRelationalDatabaseMetricData = GetRelationalDatabaseMetricData'
  { -- | The name of your database from which to get metric data.
    relationalDatabaseName :: Core.Text,
    -- | The metric for which you want to return information.
    --
    -- Valid relational database metric names are listed below, along with the
    -- most useful @statistics@ to include in your request, and the published
    -- @unit@ value. All relational database metric data is available in
    -- 1-minute (60 seconds) granularity.
    --
    -- -   __@CPUUtilization@__ - The percentage of CPU utilization currently
    --     in use on the database.
    --
    --     @Statistics@: The most useful statistics are @Maximum@ and
    --     @Average@.
    --
    --     @Unit@: The published unit is @Percent@.
    --
    -- -   __@DatabaseConnections@__ - The number of database connections in
    --     use.
    --
    --     @Statistics@: The most useful statistics are @Maximum@ and @Sum@.
    --
    --     @Unit@: The published unit is @Count@.
    --
    -- -   __@DiskQueueDepth@__ - The number of outstanding IOs (read\/write
    --     requests) that are waiting to access the disk.
    --
    --     @Statistics@: The most useful statistic is @Sum@.
    --
    --     @Unit@: The published unit is @Count@.
    --
    -- -   __@FreeStorageSpace@__ - The amount of available storage space.
    --
    --     @Statistics@: The most useful statistic is @Sum@.
    --
    --     @Unit@: The published unit is @Bytes@.
    --
    -- -   __@NetworkReceiveThroughput@__ - The incoming (Receive) network
    --     traffic on the database, including both customer database traffic
    --     and AWS traffic used for monitoring and replication.
    --
    --     @Statistics@: The most useful statistic is @Average@.
    --
    --     @Unit@: The published unit is @Bytes\/Second@.
    --
    -- -   __@NetworkTransmitThroughput@__ - The outgoing (Transmit) network
    --     traffic on the database, including both customer database traffic
    --     and AWS traffic used for monitoring and replication.
    --
    --     @Statistics@: The most useful statistic is @Average@.
    --
    --     @Unit@: The published unit is @Bytes\/Second@.
    metricName :: RelationalDatabaseMetricName,
    -- | The granularity, in seconds, of the returned data points.
    --
    -- All relational database metric data is available in 1-minute (60
    -- seconds) granularity.
    period :: Core.Natural,
    -- | The start of the time interval from which to get metric data.
    --
    -- Constraints:
    --
    -- -   Specified in Coordinated Universal Time (UTC).
    --
    -- -   Specified in the Unix time format.
    --
    --     For example, if you wish to use a start time of October 1, 2018, at
    --     8 PM UTC, then you input @1538424000@ as the start time.
    startTime :: Core.POSIX,
    -- | The end of the time interval from which to get metric data.
    --
    -- Constraints:
    --
    -- -   Specified in Coordinated Universal Time (UTC).
    --
    -- -   Specified in the Unix time format.
    --
    --     For example, if you wish to use an end time of October 1, 2018, at 8
    --     PM UTC, then you input @1538424000@ as the end time.
    endTime :: Core.POSIX,
    -- | The unit for the metric data request. Valid units depend on the metric
    -- data being requested. For the valid units with each available metric,
    -- see the @metricName@ parameter.
    unit :: MetricUnit,
    -- | The statistic for the metric.
    --
    -- The following statistics are available:
    --
    -- -   @Minimum@ - The lowest value observed during the specified period.
    --     Use this value to determine low volumes of activity for your
    --     application.
    --
    -- -   @Maximum@ - The highest value observed during the specified period.
    --     Use this value to determine high volumes of activity for your
    --     application.
    --
    -- -   @Sum@ - All values submitted for the matching metric added together.
    --     You can use this statistic to determine the total volume of a
    --     metric.
    --
    -- -   @Average@ - The value of Sum \/ SampleCount during the specified
    --     period. By comparing this statistic with the Minimum and Maximum
    --     values, you can determine the full scope of a metric and how close
    --     the average use is to the Minimum and Maximum values. This
    --     comparison helps you to know when to increase or decrease your
    --     resources.
    --
    -- -   @SampleCount@ - The count, or number, of data points used for the
    --     statistical calculation.
    statistics :: [MetricStatistic]
  }
  deriving (Core.Eq, Core.Read, Core.Show, Core.Generic)

-- |
-- Create a value of 'GetRelationalDatabaseMetricData' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'relationalDatabaseName', 'getRelationalDatabaseMetricData_relationalDatabaseName' - The name of your database from which to get metric data.
--
-- 'metricName', 'getRelationalDatabaseMetricData_metricName' - The metric for which you want to return information.
--
-- Valid relational database metric names are listed below, along with the
-- most useful @statistics@ to include in your request, and the published
-- @unit@ value. All relational database metric data is available in
-- 1-minute (60 seconds) granularity.
--
-- -   __@CPUUtilization@__ - The percentage of CPU utilization currently
--     in use on the database.
--
--     @Statistics@: The most useful statistics are @Maximum@ and
--     @Average@.
--
--     @Unit@: The published unit is @Percent@.
--
-- -   __@DatabaseConnections@__ - The number of database connections in
--     use.
--
--     @Statistics@: The most useful statistics are @Maximum@ and @Sum@.
--
--     @Unit@: The published unit is @Count@.
--
-- -   __@DiskQueueDepth@__ - The number of outstanding IOs (read\/write
--     requests) that are waiting to access the disk.
--
--     @Statistics@: The most useful statistic is @Sum@.
--
--     @Unit@: The published unit is @Count@.
--
-- -   __@FreeStorageSpace@__ - The amount of available storage space.
--
--     @Statistics@: The most useful statistic is @Sum@.
--
--     @Unit@: The published unit is @Bytes@.
--
-- -   __@NetworkReceiveThroughput@__ - The incoming (Receive) network
--     traffic on the database, including both customer database traffic
--     and AWS traffic used for monitoring and replication.
--
--     @Statistics@: The most useful statistic is @Average@.
--
--     @Unit@: The published unit is @Bytes\/Second@.
--
-- -   __@NetworkTransmitThroughput@__ - The outgoing (Transmit) network
--     traffic on the database, including both customer database traffic
--     and AWS traffic used for monitoring and replication.
--
--     @Statistics@: The most useful statistic is @Average@.
--
--     @Unit@: The published unit is @Bytes\/Second@.
--
-- 'period', 'getRelationalDatabaseMetricData_period' - The granularity, in seconds, of the returned data points.
--
-- All relational database metric data is available in 1-minute (60
-- seconds) granularity.
--
-- 'startTime', 'getRelationalDatabaseMetricData_startTime' - The start of the time interval from which to get metric data.
--
-- Constraints:
--
-- -   Specified in Coordinated Universal Time (UTC).
--
-- -   Specified in the Unix time format.
--
--     For example, if you wish to use a start time of October 1, 2018, at
--     8 PM UTC, then you input @1538424000@ as the start time.
--
-- 'endTime', 'getRelationalDatabaseMetricData_endTime' - The end of the time interval from which to get metric data.
--
-- Constraints:
--
-- -   Specified in Coordinated Universal Time (UTC).
--
-- -   Specified in the Unix time format.
--
--     For example, if you wish to use an end time of October 1, 2018, at 8
--     PM UTC, then you input @1538424000@ as the end time.
--
-- 'unit', 'getRelationalDatabaseMetricData_unit' - The unit for the metric data request. Valid units depend on the metric
-- data being requested. For the valid units with each available metric,
-- see the @metricName@ parameter.
--
-- 'statistics', 'getRelationalDatabaseMetricData_statistics' - The statistic for the metric.
--
-- The following statistics are available:
--
-- -   @Minimum@ - The lowest value observed during the specified period.
--     Use this value to determine low volumes of activity for your
--     application.
--
-- -   @Maximum@ - The highest value observed during the specified period.
--     Use this value to determine high volumes of activity for your
--     application.
--
-- -   @Sum@ - All values submitted for the matching metric added together.
--     You can use this statistic to determine the total volume of a
--     metric.
--
-- -   @Average@ - The value of Sum \/ SampleCount during the specified
--     period. By comparing this statistic with the Minimum and Maximum
--     values, you can determine the full scope of a metric and how close
--     the average use is to the Minimum and Maximum values. This
--     comparison helps you to know when to increase or decrease your
--     resources.
--
-- -   @SampleCount@ - The count, or number, of data points used for the
--     statistical calculation.
newGetRelationalDatabaseMetricData ::
  -- | 'relationalDatabaseName'
  Core.Text ->
  -- | 'metricName'
  RelationalDatabaseMetricName ->
  -- | 'period'
  Core.Natural ->
  -- | 'startTime'
  Core.UTCTime ->
  -- | 'endTime'
  Core.UTCTime ->
  -- | 'unit'
  MetricUnit ->
  GetRelationalDatabaseMetricData
newGetRelationalDatabaseMetricData
  pRelationalDatabaseName_
  pMetricName_
  pPeriod_
  pStartTime_
  pEndTime_
  pUnit_ =
    GetRelationalDatabaseMetricData'
      { relationalDatabaseName =
          pRelationalDatabaseName_,
        metricName = pMetricName_,
        period = pPeriod_,
        startTime = Core._Time Lens.# pStartTime_,
        endTime = Core._Time Lens.# pEndTime_,
        unit = pUnit_,
        statistics = Core.mempty
      }

-- | The name of your database from which to get metric data.
getRelationalDatabaseMetricData_relationalDatabaseName :: Lens.Lens' GetRelationalDatabaseMetricData Core.Text
getRelationalDatabaseMetricData_relationalDatabaseName = Lens.lens (\GetRelationalDatabaseMetricData' {relationalDatabaseName} -> relationalDatabaseName) (\s@GetRelationalDatabaseMetricData' {} a -> s {relationalDatabaseName = a} :: GetRelationalDatabaseMetricData)

-- | The metric for which you want to return information.
--
-- Valid relational database metric names are listed below, along with the
-- most useful @statistics@ to include in your request, and the published
-- @unit@ value. All relational database metric data is available in
-- 1-minute (60 seconds) granularity.
--
-- -   __@CPUUtilization@__ - The percentage of CPU utilization currently
--     in use on the database.
--
--     @Statistics@: The most useful statistics are @Maximum@ and
--     @Average@.
--
--     @Unit@: The published unit is @Percent@.
--
-- -   __@DatabaseConnections@__ - The number of database connections in
--     use.
--
--     @Statistics@: The most useful statistics are @Maximum@ and @Sum@.
--
--     @Unit@: The published unit is @Count@.
--
-- -   __@DiskQueueDepth@__ - The number of outstanding IOs (read\/write
--     requests) that are waiting to access the disk.
--
--     @Statistics@: The most useful statistic is @Sum@.
--
--     @Unit@: The published unit is @Count@.
--
-- -   __@FreeStorageSpace@__ - The amount of available storage space.
--
--     @Statistics@: The most useful statistic is @Sum@.
--
--     @Unit@: The published unit is @Bytes@.
--
-- -   __@NetworkReceiveThroughput@__ - The incoming (Receive) network
--     traffic on the database, including both customer database traffic
--     and AWS traffic used for monitoring and replication.
--
--     @Statistics@: The most useful statistic is @Average@.
--
--     @Unit@: The published unit is @Bytes\/Second@.
--
-- -   __@NetworkTransmitThroughput@__ - The outgoing (Transmit) network
--     traffic on the database, including both customer database traffic
--     and AWS traffic used for monitoring and replication.
--
--     @Statistics@: The most useful statistic is @Average@.
--
--     @Unit@: The published unit is @Bytes\/Second@.
getRelationalDatabaseMetricData_metricName :: Lens.Lens' GetRelationalDatabaseMetricData RelationalDatabaseMetricName
getRelationalDatabaseMetricData_metricName = Lens.lens (\GetRelationalDatabaseMetricData' {metricName} -> metricName) (\s@GetRelationalDatabaseMetricData' {} a -> s {metricName = a} :: GetRelationalDatabaseMetricData)

-- | The granularity, in seconds, of the returned data points.
--
-- All relational database metric data is available in 1-minute (60
-- seconds) granularity.
getRelationalDatabaseMetricData_period :: Lens.Lens' GetRelationalDatabaseMetricData Core.Natural
getRelationalDatabaseMetricData_period = Lens.lens (\GetRelationalDatabaseMetricData' {period} -> period) (\s@GetRelationalDatabaseMetricData' {} a -> s {period = a} :: GetRelationalDatabaseMetricData)

-- | The start of the time interval from which to get metric data.
--
-- Constraints:
--
-- -   Specified in Coordinated Universal Time (UTC).
--
-- -   Specified in the Unix time format.
--
--     For example, if you wish to use a start time of October 1, 2018, at
--     8 PM UTC, then you input @1538424000@ as the start time.
getRelationalDatabaseMetricData_startTime :: Lens.Lens' GetRelationalDatabaseMetricData Core.UTCTime
getRelationalDatabaseMetricData_startTime = Lens.lens (\GetRelationalDatabaseMetricData' {startTime} -> startTime) (\s@GetRelationalDatabaseMetricData' {} a -> s {startTime = a} :: GetRelationalDatabaseMetricData) Core.. Core._Time

-- | The end of the time interval from which to get metric data.
--
-- Constraints:
--
-- -   Specified in Coordinated Universal Time (UTC).
--
-- -   Specified in the Unix time format.
--
--     For example, if you wish to use an end time of October 1, 2018, at 8
--     PM UTC, then you input @1538424000@ as the end time.
getRelationalDatabaseMetricData_endTime :: Lens.Lens' GetRelationalDatabaseMetricData Core.UTCTime
getRelationalDatabaseMetricData_endTime = Lens.lens (\GetRelationalDatabaseMetricData' {endTime} -> endTime) (\s@GetRelationalDatabaseMetricData' {} a -> s {endTime = a} :: GetRelationalDatabaseMetricData) Core.. Core._Time

-- | The unit for the metric data request. Valid units depend on the metric
-- data being requested. For the valid units with each available metric,
-- see the @metricName@ parameter.
getRelationalDatabaseMetricData_unit :: Lens.Lens' GetRelationalDatabaseMetricData MetricUnit
getRelationalDatabaseMetricData_unit = Lens.lens (\GetRelationalDatabaseMetricData' {unit} -> unit) (\s@GetRelationalDatabaseMetricData' {} a -> s {unit = a} :: GetRelationalDatabaseMetricData)

-- | The statistic for the metric.
--
-- The following statistics are available:
--
-- -   @Minimum@ - The lowest value observed during the specified period.
--     Use this value to determine low volumes of activity for your
--     application.
--
-- -   @Maximum@ - The highest value observed during the specified period.
--     Use this value to determine high volumes of activity for your
--     application.
--
-- -   @Sum@ - All values submitted for the matching metric added together.
--     You can use this statistic to determine the total volume of a
--     metric.
--
-- -   @Average@ - The value of Sum \/ SampleCount during the specified
--     period. By comparing this statistic with the Minimum and Maximum
--     values, you can determine the full scope of a metric and how close
--     the average use is to the Minimum and Maximum values. This
--     comparison helps you to know when to increase or decrease your
--     resources.
--
-- -   @SampleCount@ - The count, or number, of data points used for the
--     statistical calculation.
getRelationalDatabaseMetricData_statistics :: Lens.Lens' GetRelationalDatabaseMetricData [MetricStatistic]
getRelationalDatabaseMetricData_statistics = Lens.lens (\GetRelationalDatabaseMetricData' {statistics} -> statistics) (\s@GetRelationalDatabaseMetricData' {} a -> s {statistics = a} :: GetRelationalDatabaseMetricData) Core.. Lens._Coerce

instance
  Core.AWSRequest
    GetRelationalDatabaseMetricData
  where
  type
    AWSResponse GetRelationalDatabaseMetricData =
      GetRelationalDatabaseMetricDataResponse
  request = Request.postJSON defaultService
  response =
    Response.receiveJSON
      ( \s h x ->
          GetRelationalDatabaseMetricDataResponse'
            Core.<$> (x Core..?> "metricName")
            Core.<*> (x Core..?> "metricData" Core..!@ Core.mempty)
            Core.<*> (Core.pure (Core.fromEnum s))
      )

instance
  Core.Hashable
    GetRelationalDatabaseMetricData

instance Core.NFData GetRelationalDatabaseMetricData

instance
  Core.ToHeaders
    GetRelationalDatabaseMetricData
  where
  toHeaders =
    Core.const
      ( Core.mconcat
          [ "X-Amz-Target"
              Core.=# ( "Lightsail_20161128.GetRelationalDatabaseMetricData" ::
                          Core.ByteString
                      ),
            "Content-Type"
              Core.=# ("application/x-amz-json-1.1" :: Core.ByteString)
          ]
      )

instance Core.ToJSON GetRelationalDatabaseMetricData where
  toJSON GetRelationalDatabaseMetricData' {..} =
    Core.object
      ( Core.catMaybes
          [ Core.Just
              ( "relationalDatabaseName"
                  Core..= relationalDatabaseName
              ),
            Core.Just ("metricName" Core..= metricName),
            Core.Just ("period" Core..= period),
            Core.Just ("startTime" Core..= startTime),
            Core.Just ("endTime" Core..= endTime),
            Core.Just ("unit" Core..= unit),
            Core.Just ("statistics" Core..= statistics)
          ]
      )

instance Core.ToPath GetRelationalDatabaseMetricData where
  toPath = Core.const "/"

instance Core.ToQuery GetRelationalDatabaseMetricData where
  toQuery = Core.const Core.mempty

-- | /See:/ 'newGetRelationalDatabaseMetricDataResponse' smart constructor.
data GetRelationalDatabaseMetricDataResponse = GetRelationalDatabaseMetricDataResponse'
  { -- | The name of the metric returned.
    metricName :: Core.Maybe RelationalDatabaseMetricName,
    -- | An array of objects that describe the metric data returned.
    metricData :: Core.Maybe [MetricDatapoint],
    -- | The response's http status code.
    httpStatus :: Core.Int
  }
  deriving (Core.Eq, Core.Read, Core.Show, Core.Generic)

-- |
-- Create a value of 'GetRelationalDatabaseMetricDataResponse' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'metricName', 'getRelationalDatabaseMetricDataResponse_metricName' - The name of the metric returned.
--
-- 'metricData', 'getRelationalDatabaseMetricDataResponse_metricData' - An array of objects that describe the metric data returned.
--
-- 'httpStatus', 'getRelationalDatabaseMetricDataResponse_httpStatus' - The response's http status code.
newGetRelationalDatabaseMetricDataResponse ::
  -- | 'httpStatus'
  Core.Int ->
  GetRelationalDatabaseMetricDataResponse
newGetRelationalDatabaseMetricDataResponse
  pHttpStatus_ =
    GetRelationalDatabaseMetricDataResponse'
      { metricName =
          Core.Nothing,
        metricData = Core.Nothing,
        httpStatus = pHttpStatus_
      }

-- | The name of the metric returned.
getRelationalDatabaseMetricDataResponse_metricName :: Lens.Lens' GetRelationalDatabaseMetricDataResponse (Core.Maybe RelationalDatabaseMetricName)
getRelationalDatabaseMetricDataResponse_metricName = Lens.lens (\GetRelationalDatabaseMetricDataResponse' {metricName} -> metricName) (\s@GetRelationalDatabaseMetricDataResponse' {} a -> s {metricName = a} :: GetRelationalDatabaseMetricDataResponse)

-- | An array of objects that describe the metric data returned.
getRelationalDatabaseMetricDataResponse_metricData :: Lens.Lens' GetRelationalDatabaseMetricDataResponse (Core.Maybe [MetricDatapoint])
getRelationalDatabaseMetricDataResponse_metricData = Lens.lens (\GetRelationalDatabaseMetricDataResponse' {metricData} -> metricData) (\s@GetRelationalDatabaseMetricDataResponse' {} a -> s {metricData = a} :: GetRelationalDatabaseMetricDataResponse) Core.. Lens.mapping Lens._Coerce

-- | The response's http status code.
getRelationalDatabaseMetricDataResponse_httpStatus :: Lens.Lens' GetRelationalDatabaseMetricDataResponse Core.Int
getRelationalDatabaseMetricDataResponse_httpStatus = Lens.lens (\GetRelationalDatabaseMetricDataResponse' {httpStatus} -> httpStatus) (\s@GetRelationalDatabaseMetricDataResponse' {} a -> s {httpStatus = a} :: GetRelationalDatabaseMetricDataResponse)

instance
  Core.NFData
    GetRelationalDatabaseMetricDataResponse
