load("@rules_haskell//haskell:defs.bzl", "haskell_library", "haskell_test")

# rule generated from lib/services/amazonka-signer/amazonka-signer.cabal by gazelle_cabal
haskell_library(
    name = "amazonka-signer",
    srcs = [
        "gen/Network/AWS/Signer.hs",
        "gen/Network/AWS/Signer/AddProfilePermission.hs",
        "gen/Network/AWS/Signer/CancelSigningProfile.hs",
        "gen/Network/AWS/Signer/DescribeSigningJob.hs",
        "gen/Network/AWS/Signer/GetSigningPlatform.hs",
        "gen/Network/AWS/Signer/GetSigningProfile.hs",
        "gen/Network/AWS/Signer/Lens.hs",
        "gen/Network/AWS/Signer/ListProfilePermissions.hs",
        "gen/Network/AWS/Signer/ListSigningJobs.hs",
        "gen/Network/AWS/Signer/ListSigningPlatforms.hs",
        "gen/Network/AWS/Signer/ListSigningProfiles.hs",
        "gen/Network/AWS/Signer/ListTagsForResource.hs",
        "gen/Network/AWS/Signer/PutSigningProfile.hs",
        "gen/Network/AWS/Signer/RemoveProfilePermission.hs",
        "gen/Network/AWS/Signer/RevokeSignature.hs",
        "gen/Network/AWS/Signer/RevokeSigningProfile.hs",
        "gen/Network/AWS/Signer/StartSigningJob.hs",
        "gen/Network/AWS/Signer/TagResource.hs",
        "gen/Network/AWS/Signer/Types.hs",
        "gen/Network/AWS/Signer/Types/Category.hs",
        "gen/Network/AWS/Signer/Types/Destination.hs",
        "gen/Network/AWS/Signer/Types/EncryptionAlgorithm.hs",
        "gen/Network/AWS/Signer/Types/EncryptionAlgorithmOptions.hs",
        "gen/Network/AWS/Signer/Types/HashAlgorithm.hs",
        "gen/Network/AWS/Signer/Types/HashAlgorithmOptions.hs",
        "gen/Network/AWS/Signer/Types/ImageFormat.hs",
        "gen/Network/AWS/Signer/Types/Permission.hs",
        "gen/Network/AWS/Signer/Types/S3Destination.hs",
        "gen/Network/AWS/Signer/Types/S3SignedObject.hs",
        "gen/Network/AWS/Signer/Types/S3Source.hs",
        "gen/Network/AWS/Signer/Types/SignatureValidityPeriod.hs",
        "gen/Network/AWS/Signer/Types/SignedObject.hs",
        "gen/Network/AWS/Signer/Types/SigningConfiguration.hs",
        "gen/Network/AWS/Signer/Types/SigningConfigurationOverrides.hs",
        "gen/Network/AWS/Signer/Types/SigningImageFormat.hs",
        "gen/Network/AWS/Signer/Types/SigningJob.hs",
        "gen/Network/AWS/Signer/Types/SigningJobRevocationRecord.hs",
        "gen/Network/AWS/Signer/Types/SigningMaterial.hs",
        "gen/Network/AWS/Signer/Types/SigningPlatform.hs",
        "gen/Network/AWS/Signer/Types/SigningPlatformOverrides.hs",
        "gen/Network/AWS/Signer/Types/SigningProfile.hs",
        "gen/Network/AWS/Signer/Types/SigningProfileRevocationRecord.hs",
        "gen/Network/AWS/Signer/Types/SigningProfileStatus.hs",
        "gen/Network/AWS/Signer/Types/SigningStatus.hs",
        "gen/Network/AWS/Signer/Types/Source.hs",
        "gen/Network/AWS/Signer/Types/ValidityType.hs",
        "gen/Network/AWS/Signer/UntagResource.hs",
        "gen/Network/AWS/Signer/Waiters.hs",
    ],
    compiler_flags = [
        "-DVERSION_amazonka_signer=\"2.0\"",
        "-Wall",
        "-fwarn-incomplete-uni-patterns",
        "-fwarn-incomplete-record-updates",
        "-funbox-strict-fields",
    ],
    hidden_modules = [],
    version = "2.0",
    visibility = ["//visibility:public"],
    deps = [
        "//lib/amazonka",
        "@stackage//:base",
    ],
)

# rule generated from lib/services/amazonka-signer/amazonka-signer.cabal by gazelle_cabal
haskell_test(
    name = "amazonka-signer-test",
    srcs = [
        "test/Main.hs",
        "test/Test/AWS/Gen/Signer.hs",
        "test/Test/AWS/Signer.hs",
        "test/Test/AWS/Signer/Internal.hs",
    ],
    compiler_flags = [
        "-DVERSION_amazonka_signer=\"2.0\"",
        "-Wall",
        "-threaded",
    ],
    version = "2.0",
    visibility = ["//visibility:public"],
    deps = [
        ":amazonka-signer",
        "//lib/amazonka",
        "//lib/amazonka-test",
        "@stackage//:base",
        "@stackage//:bytestring",
        "@stackage//:case-insensitive",
        "@stackage//:tasty",
        "@stackage//:tasty-hunit",
        "@stackage//:text",
        "@stackage//:time",
        "@stackage//:unordered-containers",
    ],
)
