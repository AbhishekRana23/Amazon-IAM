load("@rules_haskell//haskell:defs.bzl", "haskell_library", "haskell_test")

# rule generated from lib/services/amazonka-kafka/amazonka-kafka.cabal by gazelle_cabal
haskell_library(
    name = "amazonka-kafka",
    srcs = [
        "gen/Network/AWS/Kafka.hs",
        "gen/Network/AWS/Kafka/BatchAssociateScramSecret.hs",
        "gen/Network/AWS/Kafka/BatchDisassociateScramSecret.hs",
        "gen/Network/AWS/Kafka/CreateCluster.hs",
        "gen/Network/AWS/Kafka/CreateConfiguration.hs",
        "gen/Network/AWS/Kafka/DeleteCluster.hs",
        "gen/Network/AWS/Kafka/DeleteConfiguration.hs",
        "gen/Network/AWS/Kafka/DescribeCluster.hs",
        "gen/Network/AWS/Kafka/DescribeClusterOperation.hs",
        "gen/Network/AWS/Kafka/DescribeConfiguration.hs",
        "gen/Network/AWS/Kafka/DescribeConfigurationRevision.hs",
        "gen/Network/AWS/Kafka/GetBootstrapBrokers.hs",
        "gen/Network/AWS/Kafka/GetCompatibleKafkaVersions.hs",
        "gen/Network/AWS/Kafka/Lens.hs",
        "gen/Network/AWS/Kafka/ListClusterOperations.hs",
        "gen/Network/AWS/Kafka/ListClusters.hs",
        "gen/Network/AWS/Kafka/ListConfigurationRevisions.hs",
        "gen/Network/AWS/Kafka/ListConfigurations.hs",
        "gen/Network/AWS/Kafka/ListKafkaVersions.hs",
        "gen/Network/AWS/Kafka/ListNodes.hs",
        "gen/Network/AWS/Kafka/ListScramSecrets.hs",
        "gen/Network/AWS/Kafka/ListTagsForResource.hs",
        "gen/Network/AWS/Kafka/RebootBroker.hs",
        "gen/Network/AWS/Kafka/TagResource.hs",
        "gen/Network/AWS/Kafka/Types.hs",
        "gen/Network/AWS/Kafka/Types/BrokerAZDistribution.hs",
        "gen/Network/AWS/Kafka/Types/BrokerEBSVolumeInfo.hs",
        "gen/Network/AWS/Kafka/Types/BrokerLogs.hs",
        "gen/Network/AWS/Kafka/Types/BrokerNodeGroupInfo.hs",
        "gen/Network/AWS/Kafka/Types/BrokerNodeInfo.hs",
        "gen/Network/AWS/Kafka/Types/BrokerSoftwareInfo.hs",
        "gen/Network/AWS/Kafka/Types/ClientAuthentication.hs",
        "gen/Network/AWS/Kafka/Types/ClientBroker.hs",
        "gen/Network/AWS/Kafka/Types/CloudWatchLogs.hs",
        "gen/Network/AWS/Kafka/Types/ClusterInfo.hs",
        "gen/Network/AWS/Kafka/Types/ClusterOperationInfo.hs",
        "gen/Network/AWS/Kafka/Types/ClusterOperationStep.hs",
        "gen/Network/AWS/Kafka/Types/ClusterOperationStepInfo.hs",
        "gen/Network/AWS/Kafka/Types/ClusterState.hs",
        "gen/Network/AWS/Kafka/Types/CompatibleKafkaVersion.hs",
        "gen/Network/AWS/Kafka/Types/Configuration.hs",
        "gen/Network/AWS/Kafka/Types/ConfigurationInfo.hs",
        "gen/Network/AWS/Kafka/Types/ConfigurationRevision.hs",
        "gen/Network/AWS/Kafka/Types/ConfigurationState.hs",
        "gen/Network/AWS/Kafka/Types/EBSStorageInfo.hs",
        "gen/Network/AWS/Kafka/Types/EncryptionAtRest.hs",
        "gen/Network/AWS/Kafka/Types/EncryptionInTransit.hs",
        "gen/Network/AWS/Kafka/Types/EncryptionInfo.hs",
        "gen/Network/AWS/Kafka/Types/EnhancedMonitoring.hs",
        "gen/Network/AWS/Kafka/Types/ErrorInfo.hs",
        "gen/Network/AWS/Kafka/Types/Firehose.hs",
        "gen/Network/AWS/Kafka/Types/Iam.hs",
        "gen/Network/AWS/Kafka/Types/JmxExporter.hs",
        "gen/Network/AWS/Kafka/Types/JmxExporterInfo.hs",
        "gen/Network/AWS/Kafka/Types/KafkaVersion.hs",
        "gen/Network/AWS/Kafka/Types/KafkaVersionStatus.hs",
        "gen/Network/AWS/Kafka/Types/LoggingInfo.hs",
        "gen/Network/AWS/Kafka/Types/MutableClusterInfo.hs",
        "gen/Network/AWS/Kafka/Types/NodeExporter.hs",
        "gen/Network/AWS/Kafka/Types/NodeExporterInfo.hs",
        "gen/Network/AWS/Kafka/Types/NodeInfo.hs",
        "gen/Network/AWS/Kafka/Types/NodeType.hs",
        "gen/Network/AWS/Kafka/Types/OpenMonitoring.hs",
        "gen/Network/AWS/Kafka/Types/OpenMonitoringInfo.hs",
        "gen/Network/AWS/Kafka/Types/Prometheus.hs",
        "gen/Network/AWS/Kafka/Types/PrometheusInfo.hs",
        "gen/Network/AWS/Kafka/Types/S3.hs",
        "gen/Network/AWS/Kafka/Types/Sasl.hs",
        "gen/Network/AWS/Kafka/Types/Scram.hs",
        "gen/Network/AWS/Kafka/Types/StateInfo.hs",
        "gen/Network/AWS/Kafka/Types/StorageInfo.hs",
        "gen/Network/AWS/Kafka/Types/Tls.hs",
        "gen/Network/AWS/Kafka/Types/Unauthenticated.hs",
        "gen/Network/AWS/Kafka/Types/UnprocessedScramSecret.hs",
        "gen/Network/AWS/Kafka/Types/ZookeeperNodeInfo.hs",
        "gen/Network/AWS/Kafka/UntagResource.hs",
        "gen/Network/AWS/Kafka/UpdateBrokerCount.hs",
        "gen/Network/AWS/Kafka/UpdateBrokerStorage.hs",
        "gen/Network/AWS/Kafka/UpdateBrokerType.hs",
        "gen/Network/AWS/Kafka/UpdateClusterConfiguration.hs",
        "gen/Network/AWS/Kafka/UpdateClusterKafkaVersion.hs",
        "gen/Network/AWS/Kafka/UpdateConfiguration.hs",
        "gen/Network/AWS/Kafka/UpdateMonitoring.hs",
        "gen/Network/AWS/Kafka/UpdateSecurity.hs",
        "gen/Network/AWS/Kafka/Waiters.hs",
    ],
    compiler_flags = [
        "-DVERSION_amazonka_kafka=\"2.0\"",
        "-Wall",
        "-fwarn-incomplete-uni-patterns",
        "-fwarn-incomplete-record-updates",
        "-funbox-strict-fields",
    ],
    hidden_modules = [],
    version = "2.0",
    visibility = ["//visibility:public"],
    deps = [
        "//lib/amazonka",
        "@stackage//:base",
    ],
)

# rule generated from lib/services/amazonka-kafka/amazonka-kafka.cabal by gazelle_cabal
haskell_test(
    name = "amazonka-kafka-test",
    srcs = [
        "test/Main.hs",
        "test/Test/AWS/Gen/Kafka.hs",
        "test/Test/AWS/Kafka.hs",
        "test/Test/AWS/Kafka/Internal.hs",
    ],
    compiler_flags = [
        "-DVERSION_amazonka_kafka=\"2.0\"",
        "-Wall",
        "-threaded",
    ],
    version = "2.0",
    visibility = ["//visibility:public"],
    deps = [
        ":amazonka-kafka",
        "//lib/amazonka",
        "//lib/amazonka-test",
        "@stackage//:base",
        "@stackage//:bytestring",
        "@stackage//:case-insensitive",
        "@stackage//:tasty",
        "@stackage//:tasty-hunit",
        "@stackage//:text",
        "@stackage//:time",
        "@stackage//:unordered-containers",
    ],
)
