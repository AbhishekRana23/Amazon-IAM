load("@rules_haskell//haskell:defs.bzl", "haskell_library", "haskell_test")

# rule generated from amazonka-ecr/amazonka-ecr.cabal by gazelle_cabal
haskell_library(
    name = "amazonka-ecr",
    srcs = [
        "gen/Network/AWS/ECR.hs",
        "gen/Network/AWS/ECR/BatchCheckLayerAvailability.hs",
        "gen/Network/AWS/ECR/BatchDeleteImage.hs",
        "gen/Network/AWS/ECR/BatchGetImage.hs",
        "gen/Network/AWS/ECR/CompleteLayerUpload.hs",
        "gen/Network/AWS/ECR/CreateRepository.hs",
        "gen/Network/AWS/ECR/DeleteLifecyclePolicy.hs",
        "gen/Network/AWS/ECR/DeleteRegistryPolicy.hs",
        "gen/Network/AWS/ECR/DeleteRepository.hs",
        "gen/Network/AWS/ECR/DeleteRepositoryPolicy.hs",
        "gen/Network/AWS/ECR/DescribeImageReplicationStatus.hs",
        "gen/Network/AWS/ECR/DescribeImageScanFindings.hs",
        "gen/Network/AWS/ECR/DescribeImages.hs",
        "gen/Network/AWS/ECR/DescribeRegistry.hs",
        "gen/Network/AWS/ECR/DescribeRepositories.hs",
        "gen/Network/AWS/ECR/GetAuthorizationToken.hs",
        "gen/Network/AWS/ECR/GetDownloadUrlForLayer.hs",
        "gen/Network/AWS/ECR/GetLifecyclePolicy.hs",
        "gen/Network/AWS/ECR/GetLifecyclePolicyPreview.hs",
        "gen/Network/AWS/ECR/GetRegistryPolicy.hs",
        "gen/Network/AWS/ECR/GetRepositoryPolicy.hs",
        "gen/Network/AWS/ECR/InitiateLayerUpload.hs",
        "gen/Network/AWS/ECR/Lens.hs",
        "gen/Network/AWS/ECR/ListImages.hs",
        "gen/Network/AWS/ECR/ListTagsForResource.hs",
        "gen/Network/AWS/ECR/PutImage.hs",
        "gen/Network/AWS/ECR/PutImageScanningConfiguration.hs",
        "gen/Network/AWS/ECR/PutImageTagMutability.hs",
        "gen/Network/AWS/ECR/PutLifecyclePolicy.hs",
        "gen/Network/AWS/ECR/PutRegistryPolicy.hs",
        "gen/Network/AWS/ECR/PutReplicationConfiguration.hs",
        "gen/Network/AWS/ECR/SetRepositoryPolicy.hs",
        "gen/Network/AWS/ECR/StartImageScan.hs",
        "gen/Network/AWS/ECR/StartLifecyclePolicyPreview.hs",
        "gen/Network/AWS/ECR/TagResource.hs",
        "gen/Network/AWS/ECR/Types.hs",
        "gen/Network/AWS/ECR/Types/Attribute.hs",
        "gen/Network/AWS/ECR/Types/AuthorizationData.hs",
        "gen/Network/AWS/ECR/Types/DescribeImagesFilter.hs",
        "gen/Network/AWS/ECR/Types/EncryptionConfiguration.hs",
        "gen/Network/AWS/ECR/Types/EncryptionType.hs",
        "gen/Network/AWS/ECR/Types/FindingSeverity.hs",
        "gen/Network/AWS/ECR/Types/Image.hs",
        "gen/Network/AWS/ECR/Types/ImageActionType.hs",
        "gen/Network/AWS/ECR/Types/ImageDetail.hs",
        "gen/Network/AWS/ECR/Types/ImageFailure.hs",
        "gen/Network/AWS/ECR/Types/ImageFailureCode.hs",
        "gen/Network/AWS/ECR/Types/ImageIdentifier.hs",
        "gen/Network/AWS/ECR/Types/ImageReplicationStatus.hs",
        "gen/Network/AWS/ECR/Types/ImageScanFinding.hs",
        "gen/Network/AWS/ECR/Types/ImageScanFindings.hs",
        "gen/Network/AWS/ECR/Types/ImageScanFindingsSummary.hs",
        "gen/Network/AWS/ECR/Types/ImageScanStatus.hs",
        "gen/Network/AWS/ECR/Types/ImageScanningConfiguration.hs",
        "gen/Network/AWS/ECR/Types/ImageTagMutability.hs",
        "gen/Network/AWS/ECR/Types/Layer.hs",
        "gen/Network/AWS/ECR/Types/LayerAvailability.hs",
        "gen/Network/AWS/ECR/Types/LayerFailure.hs",
        "gen/Network/AWS/ECR/Types/LayerFailureCode.hs",
        "gen/Network/AWS/ECR/Types/LifecyclePolicyPreviewFilter.hs",
        "gen/Network/AWS/ECR/Types/LifecyclePolicyPreviewResult.hs",
        "gen/Network/AWS/ECR/Types/LifecyclePolicyPreviewStatus.hs",
        "gen/Network/AWS/ECR/Types/LifecyclePolicyPreviewSummary.hs",
        "gen/Network/AWS/ECR/Types/LifecyclePolicyRuleAction.hs",
        "gen/Network/AWS/ECR/Types/ListImagesFilter.hs",
        "gen/Network/AWS/ECR/Types/ReplicationConfiguration.hs",
        "gen/Network/AWS/ECR/Types/ReplicationDestination.hs",
        "gen/Network/AWS/ECR/Types/ReplicationRule.hs",
        "gen/Network/AWS/ECR/Types/ReplicationStatus.hs",
        "gen/Network/AWS/ECR/Types/Repository.hs",
        "gen/Network/AWS/ECR/Types/RepositoryFilter.hs",
        "gen/Network/AWS/ECR/Types/RepositoryFilterType.hs",
        "gen/Network/AWS/ECR/Types/ScanStatus.hs",
        "gen/Network/AWS/ECR/Types/Tag.hs",
        "gen/Network/AWS/ECR/Types/TagStatus.hs",
        "gen/Network/AWS/ECR/UntagResource.hs",
        "gen/Network/AWS/ECR/UploadLayerPart.hs",
        "gen/Network/AWS/ECR/Waiters.hs",
    ],
    compiler_flags = [
        "-DVERSION_amazonka_ecr=\"1.6.1\"",
        "-Wall",
        "-fwarn-incomplete-uni-patterns",
        "-fwarn-incomplete-record-updates",
        "-funbox-strict-fields",
    ],
    hidden_modules = [],
    version = "1.6.1",
    visibility = ["//visibility:public"],
    deps = [
        "//lib/amazonka",
        "@stackage//:base",
    ],
)

# rule generated from amazonka-ecr/amazonka-ecr.cabal by gazelle_cabal
haskell_test(
    name = "amazonka-ecr-test",
    srcs = [
        "test/Main.hs",
        "test/Test/AWS/ECR.hs",
        "test/Test/AWS/ECR/Internal.hs",
        "test/Test/AWS/Gen/ECR.hs",
    ],
    compiler_flags = [
        "-DVERSION_amazonka_ecr=\"1.6.1\"",
        "-Wall",
        "-threaded",
    ],
    version = "1.6.1",
    visibility = ["//visibility:public"],
    deps = [
        ":amazonka-ecr",
        "//lib/amazonka",
        "//lib/amazonka-test",
        "@stackage//:base",
        "@stackage//:bytestring",
        "@stackage//:case-insensitive",
        "@stackage//:tasty",
        "@stackage//:tasty-hunit",
        "@stackage//:text",
        "@stackage//:time",
        "@stackage//:unordered-containers",
    ],
)
