load("@rules_haskell//haskell:defs.bzl", "haskell_library", "haskell_test")

# rule generated from amazonka-marketplace-entitlement/amazonka-marketplace-entitlement.cabal by gazelle_cabal
haskell_library(
    name = "amazonka-marketplace-entitlement",
    srcs = [
        "gen/Amazonka/MarketplaceEntitlement.hs",
        "gen/Amazonka/MarketplaceEntitlement/GetEntitlements.hs",
        "gen/Amazonka/MarketplaceEntitlement/Lens.hs",
        "gen/Amazonka/MarketplaceEntitlement/Types.hs",
        "gen/Amazonka/MarketplaceEntitlement/Types/Entitlement.hs",
        "gen/Amazonka/MarketplaceEntitlement/Types/EntitlementValue.hs",
        "gen/Amazonka/MarketplaceEntitlement/Types/GetEntitlementFilterName.hs",
        "gen/Amazonka/MarketplaceEntitlement/Waiters.hs",
    ],
    compiler_flags = [
        "-Wall",
        "-fwarn-incomplete-uni-patterns",
        "-fwarn-incomplete-record-updates",
        "-funbox-strict-fields",
        "-DVERSION_amazonka_marketplace_entitlement=\"2.0\"",
    ],
    hidden_modules = [],
    version = "2.0",
    visibility = ["//visibility:public"],
    deps = [
        "//lib/amazonka",
        "@stackage//:base",
    ],
)

# rule generated from amazonka-marketplace-entitlement/amazonka-marketplace-entitlement.cabal by gazelle_cabal
haskell_test(
    name = "amazonka-marketplace-entitlement-test",
    srcs = [
        "test/Main.hs",
        "test/Test/Amazonka/Gen/MarketplaceEntitlement.hs",
        "test/Test/Amazonka/MarketplaceEntitlement.hs",
        "test/Test/Amazonka/MarketplaceEntitlement/Internal.hs",
    ],
    compiler_flags = [
        "-Wall",
        "-threaded",
        "-DVERSION_amazonka_marketplace_entitlement=\"2.0\"",
    ],
    version = "2.0",
    visibility = ["//visibility:public"],
    deps = [
        ":amazonka-marketplace-entitlement",
        "//lib/amazonka",
        "//lib/amazonka-test",
        "@stackage//:base",
        "@stackage//:bytestring",
        "@stackage//:case-insensitive",
        "@stackage//:tasty",
        "@stackage//:tasty-hunit",
        "@stackage//:text",
        "@stackage//:time",
        "@stackage//:unordered-containers",
    ],
)
