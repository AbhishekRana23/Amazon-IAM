load("@rules_haskell//haskell:defs.bzl", "haskell_library", "haskell_test")

# rule generated from lib/services/amazonka-account/amazonka-account.cabal by gazelle_cabal
haskell_library(
    name = "amazonka-account",
    srcs = [
        "gen/Network/AWS/Account.hs",
        "gen/Network/AWS/Account/DeleteAlternateContact.hs",
        "gen/Network/AWS/Account/GetAlternateContact.hs",
        "gen/Network/AWS/Account/Lens.hs",
        "gen/Network/AWS/Account/PutAlternateContact.hs",
        "gen/Network/AWS/Account/Types.hs",
        "gen/Network/AWS/Account/Types/AlternateContact.hs",
        "gen/Network/AWS/Account/Types/AlternateContactType.hs",
        "gen/Network/AWS/Account/Waiters.hs",
    ],
    compiler_flags = [
        "-DVERSION_amazonka_account=\"2.0\"",
        "-Wall",
        "-fwarn-incomplete-uni-patterns",
        "-fwarn-incomplete-record-updates",
        "-funbox-strict-fields",
    ],
    hidden_modules = [],
    version = "2.0",
    visibility = ["//visibility:public"],
    deps = [
        "//lib/amazonka",
        "@stackage//:base",
    ],
)

# rule generated from lib/services/amazonka-account/amazonka-account.cabal by gazelle_cabal
haskell_test(
    name = "amazonka-account-test",
    srcs = [
        "test/Main.hs",
        "test/Test/AWS/Account.hs",
        "test/Test/AWS/Account/Internal.hs",
        "test/Test/AWS/Gen/Account.hs",
    ],
    compiler_flags = [
        "-DVERSION_amazonka_account=\"2.0\"",
        "-Wall",
        "-threaded",
    ],
    version = "2.0",
    visibility = ["//visibility:public"],
    deps = [
        ":amazonka-account",
        "//lib/amazonka",
        "//lib/amazonka-test",
        "@stackage//:base",
        "@stackage//:bytestring",
        "@stackage//:case-insensitive",
        "@stackage//:tasty",
        "@stackage//:tasty-hunit",
        "@stackage//:text",
        "@stackage//:time",
        "@stackage//:unordered-containers",
    ],
)
