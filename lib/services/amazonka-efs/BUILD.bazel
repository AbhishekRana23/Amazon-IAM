load("@rules_haskell//haskell:defs.bzl", "haskell_library", "haskell_test")

# rule generated from amazonka-efs/amazonka-efs.cabal by gazelle_cabal
haskell_library(
    name = "amazonka-efs",
    srcs = [
        "gen/Network/AWS/EFS.hs",
        "gen/Network/AWS/EFS/CreateAccessPoint.hs",
        "gen/Network/AWS/EFS/CreateFileSystem.hs",
        "gen/Network/AWS/EFS/CreateMountTarget.hs",
        "gen/Network/AWS/EFS/DeleteAccessPoint.hs",
        "gen/Network/AWS/EFS/DeleteFileSystem.hs",
        "gen/Network/AWS/EFS/DeleteFileSystemPolicy.hs",
        "gen/Network/AWS/EFS/DeleteMountTarget.hs",
        "gen/Network/AWS/EFS/DescribeAccessPoints.hs",
        "gen/Network/AWS/EFS/DescribeAccountPreferences.hs",
        "gen/Network/AWS/EFS/DescribeBackupPolicy.hs",
        "gen/Network/AWS/EFS/DescribeFileSystemPolicy.hs",
        "gen/Network/AWS/EFS/DescribeFileSystems.hs",
        "gen/Network/AWS/EFS/DescribeLifecycleConfiguration.hs",
        "gen/Network/AWS/EFS/DescribeMountTargetSecurityGroups.hs",
        "gen/Network/AWS/EFS/DescribeMountTargets.hs",
        "gen/Network/AWS/EFS/Lens.hs",
        "gen/Network/AWS/EFS/ListTagsForResource.hs",
        "gen/Network/AWS/EFS/ModifyMountTargetSecurityGroups.hs",
        "gen/Network/AWS/EFS/PutAccountPreferences.hs",
        "gen/Network/AWS/EFS/PutBackupPolicy.hs",
        "gen/Network/AWS/EFS/PutFileSystemPolicy.hs",
        "gen/Network/AWS/EFS/PutLifecycleConfiguration.hs",
        "gen/Network/AWS/EFS/TagResource.hs",
        "gen/Network/AWS/EFS/Types.hs",
        "gen/Network/AWS/EFS/Types/AccessPointDescription.hs",
        "gen/Network/AWS/EFS/Types/BackupPolicy.hs",
        "gen/Network/AWS/EFS/Types/BackupPolicyDescription.hs",
        "gen/Network/AWS/EFS/Types/BackupStatus.hs",
        "gen/Network/AWS/EFS/Types/CreationInfo.hs",
        "gen/Network/AWS/EFS/Types/FileSystemDescription.hs",
        "gen/Network/AWS/EFS/Types/FileSystemPolicyDescription.hs",
        "gen/Network/AWS/EFS/Types/FileSystemSize.hs",
        "gen/Network/AWS/EFS/Types/LifeCycleState.hs",
        "gen/Network/AWS/EFS/Types/LifecycleConfigurationDescription.hs",
        "gen/Network/AWS/EFS/Types/LifecyclePolicy.hs",
        "gen/Network/AWS/EFS/Types/MountTargetDescription.hs",
        "gen/Network/AWS/EFS/Types/PerformanceMode.hs",
        "gen/Network/AWS/EFS/Types/PosixUser.hs",
        "gen/Network/AWS/EFS/Types/Resource.hs",
        "gen/Network/AWS/EFS/Types/ResourceIdPreference.hs",
        "gen/Network/AWS/EFS/Types/ResourceIdType.hs",
        "gen/Network/AWS/EFS/Types/RootDirectory.hs",
        "gen/Network/AWS/EFS/Types/Tag.hs",
        "gen/Network/AWS/EFS/Types/ThroughputMode.hs",
        "gen/Network/AWS/EFS/Types/TransitionToIARules.hs",
        "gen/Network/AWS/EFS/Types/TransitionToPrimaryStorageClassRules.hs",
        "gen/Network/AWS/EFS/UntagResource.hs",
        "gen/Network/AWS/EFS/UpdateFileSystem.hs",
        "gen/Network/AWS/EFS/Waiters.hs",
    ],
    compiler_flags = [
        "-Wall",
        "-fwarn-incomplete-uni-patterns",
        "-fwarn-incomplete-record-updates",
        "-funbox-strict-fields",
        "-DVERSION_amazonka_efs=\"2.0\"",
    ],
    hidden_modules = [],
    version = "2.0",
    visibility = ["//visibility:public"],
    deps = [
        "//lib/amazonka",
        "@stackage//:base",
    ],
)

# rule generated from amazonka-efs/amazonka-efs.cabal by gazelle_cabal
haskell_test(
    name = "amazonka-efs-test",
    srcs = [
        "test/Main.hs",
        "test/Test/AWS/EFS.hs",
        "test/Test/AWS/EFS/Internal.hs",
        "test/Test/AWS/Gen/EFS.hs",
    ],
    compiler_flags = [
        "-Wall",
        "-threaded",
        "-DVERSION_amazonka_efs=\"2.0\"",
    ],
    version = "2.0",
    visibility = ["//visibility:public"],
    deps = [
        ":amazonka-efs",
        "//lib/amazonka",
        "//lib/amazonka-test",
        "@stackage//:base",
        "@stackage//:bytestring",
        "@stackage//:case-insensitive",
        "@stackage//:tasty",
        "@stackage//:tasty-hunit",
        "@stackage//:text",
        "@stackage//:time",
        "@stackage//:unordered-containers",
    ],
)
