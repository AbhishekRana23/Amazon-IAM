load("@rules_haskell//haskell:defs.bzl", "haskell_library", "haskell_test")

# rule generated from lib/services/amazonka-honeycode/amazonka-honeycode.cabal by gazelle_cabal
haskell_library(
    name = "amazonka-honeycode",
    srcs = [
        "gen/Network/AWS/HoneyCode.hs",
        "gen/Network/AWS/HoneyCode/BatchCreateTableRows.hs",
        "gen/Network/AWS/HoneyCode/BatchDeleteTableRows.hs",
        "gen/Network/AWS/HoneyCode/BatchUpdateTableRows.hs",
        "gen/Network/AWS/HoneyCode/BatchUpsertTableRows.hs",
        "gen/Network/AWS/HoneyCode/DescribeTableDataImportJob.hs",
        "gen/Network/AWS/HoneyCode/GetScreenData.hs",
        "gen/Network/AWS/HoneyCode/InvokeScreenAutomation.hs",
        "gen/Network/AWS/HoneyCode/Lens.hs",
        "gen/Network/AWS/HoneyCode/ListTableColumns.hs",
        "gen/Network/AWS/HoneyCode/ListTableRows.hs",
        "gen/Network/AWS/HoneyCode/ListTables.hs",
        "gen/Network/AWS/HoneyCode/QueryTableRows.hs",
        "gen/Network/AWS/HoneyCode/StartTableDataImportJob.hs",
        "gen/Network/AWS/HoneyCode/Types.hs",
        "gen/Network/AWS/HoneyCode/Types/Cell.hs",
        "gen/Network/AWS/HoneyCode/Types/CellInput.hs",
        "gen/Network/AWS/HoneyCode/Types/ColumnMetadata.hs",
        "gen/Network/AWS/HoneyCode/Types/CreateRowData.hs",
        "gen/Network/AWS/HoneyCode/Types/DataItem.hs",
        "gen/Network/AWS/HoneyCode/Types/DelimitedTextImportOptions.hs",
        "gen/Network/AWS/HoneyCode/Types/DestinationOptions.hs",
        "gen/Network/AWS/HoneyCode/Types/FailedBatchItem.hs",
        "gen/Network/AWS/HoneyCode/Types/Filter.hs",
        "gen/Network/AWS/HoneyCode/Types/Format.hs",
        "gen/Network/AWS/HoneyCode/Types/ImportDataCharacterEncoding.hs",
        "gen/Network/AWS/HoneyCode/Types/ImportDataSource.hs",
        "gen/Network/AWS/HoneyCode/Types/ImportDataSourceConfig.hs",
        "gen/Network/AWS/HoneyCode/Types/ImportJobSubmitter.hs",
        "gen/Network/AWS/HoneyCode/Types/ImportOptions.hs",
        "gen/Network/AWS/HoneyCode/Types/ImportSourceDataFormat.hs",
        "gen/Network/AWS/HoneyCode/Types/ResultRow.hs",
        "gen/Network/AWS/HoneyCode/Types/ResultSet.hs",
        "gen/Network/AWS/HoneyCode/Types/SourceDataColumnProperties.hs",
        "gen/Network/AWS/HoneyCode/Types/Table.hs",
        "gen/Network/AWS/HoneyCode/Types/TableColumn.hs",
        "gen/Network/AWS/HoneyCode/Types/TableDataImportJobMetadata.hs",
        "gen/Network/AWS/HoneyCode/Types/TableDataImportJobStatus.hs",
        "gen/Network/AWS/HoneyCode/Types/TableRow.hs",
        "gen/Network/AWS/HoneyCode/Types/UpdateRowData.hs",
        "gen/Network/AWS/HoneyCode/Types/UpsertAction.hs",
        "gen/Network/AWS/HoneyCode/Types/UpsertRowData.hs",
        "gen/Network/AWS/HoneyCode/Types/UpsertRowsResult.hs",
        "gen/Network/AWS/HoneyCode/Types/VariableValue.hs",
        "gen/Network/AWS/HoneyCode/Waiters.hs",
    ],
    compiler_flags = [
        "-DVERSION_amazonka_honeycode=\"2.0\"",
        "-Wall",
        "-fwarn-incomplete-uni-patterns",
        "-fwarn-incomplete-record-updates",
        "-funbox-strict-fields",
    ],
    hidden_modules = [],
    version = "2.0",
    visibility = ["//visibility:public"],
    deps = [
        "//lib/amazonka",
        "@stackage//:base",
    ],
)

# rule generated from lib/services/amazonka-honeycode/amazonka-honeycode.cabal by gazelle_cabal
haskell_test(
    name = "amazonka-honeycode-test",
    srcs = [
        "test/Main.hs",
        "test/Test/AWS/Gen/HoneyCode.hs",
        "test/Test/AWS/HoneyCode.hs",
        "test/Test/AWS/HoneyCode/Internal.hs",
    ],
    compiler_flags = [
        "-DVERSION_amazonka_honeycode=\"2.0\"",
        "-Wall",
        "-threaded",
    ],
    version = "2.0",
    visibility = ["//visibility:public"],
    deps = [
        ":amazonka-honeycode",
        "//lib/amazonka",
        "//lib/amazonka-test",
        "@stackage//:base",
        "@stackage//:bytestring",
        "@stackage//:case-insensitive",
        "@stackage//:tasty",
        "@stackage//:tasty-hunit",
        "@stackage//:text",
        "@stackage//:time",
        "@stackage//:unordered-containers",
    ],
)
