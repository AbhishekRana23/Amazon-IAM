load("@rules_haskell//haskell:defs.bzl", "haskell_library", "haskell_test")

# rule generated from lib/services/amazonka-synthetics/amazonka-synthetics.cabal by gazelle_cabal
haskell_library(
    name = "amazonka-synthetics",
    srcs = [
        "gen/Network/AWS/Synthetics.hs",
        "gen/Network/AWS/Synthetics/CreateCanary.hs",
        "gen/Network/AWS/Synthetics/DeleteCanary.hs",
        "gen/Network/AWS/Synthetics/DescribeCanaries.hs",
        "gen/Network/AWS/Synthetics/DescribeCanariesLastRun.hs",
        "gen/Network/AWS/Synthetics/DescribeRuntimeVersions.hs",
        "gen/Network/AWS/Synthetics/GetCanary.hs",
        "gen/Network/AWS/Synthetics/GetCanaryRuns.hs",
        "gen/Network/AWS/Synthetics/Lens.hs",
        "gen/Network/AWS/Synthetics/ListTagsForResource.hs",
        "gen/Network/AWS/Synthetics/StartCanary.hs",
        "gen/Network/AWS/Synthetics/StopCanary.hs",
        "gen/Network/AWS/Synthetics/TagResource.hs",
        "gen/Network/AWS/Synthetics/Types.hs",
        "gen/Network/AWS/Synthetics/Types/ArtifactConfigInput.hs",
        "gen/Network/AWS/Synthetics/Types/ArtifactConfigOutput.hs",
        "gen/Network/AWS/Synthetics/Types/BaseScreenshot.hs",
        "gen/Network/AWS/Synthetics/Types/Canary.hs",
        "gen/Network/AWS/Synthetics/Types/CanaryCodeInput.hs",
        "gen/Network/AWS/Synthetics/Types/CanaryCodeOutput.hs",
        "gen/Network/AWS/Synthetics/Types/CanaryLastRun.hs",
        "gen/Network/AWS/Synthetics/Types/CanaryRun.hs",
        "gen/Network/AWS/Synthetics/Types/CanaryRunConfigInput.hs",
        "gen/Network/AWS/Synthetics/Types/CanaryRunConfigOutput.hs",
        "gen/Network/AWS/Synthetics/Types/CanaryRunState.hs",
        "gen/Network/AWS/Synthetics/Types/CanaryRunStateReasonCode.hs",
        "gen/Network/AWS/Synthetics/Types/CanaryRunStatus.hs",
        "gen/Network/AWS/Synthetics/Types/CanaryRunTimeline.hs",
        "gen/Network/AWS/Synthetics/Types/CanaryScheduleInput.hs",
        "gen/Network/AWS/Synthetics/Types/CanaryScheduleOutput.hs",
        "gen/Network/AWS/Synthetics/Types/CanaryState.hs",
        "gen/Network/AWS/Synthetics/Types/CanaryStateReasonCode.hs",
        "gen/Network/AWS/Synthetics/Types/CanaryStatus.hs",
        "gen/Network/AWS/Synthetics/Types/CanaryTimeline.hs",
        "gen/Network/AWS/Synthetics/Types/EncryptionMode.hs",
        "gen/Network/AWS/Synthetics/Types/RuntimeVersion.hs",
        "gen/Network/AWS/Synthetics/Types/S3EncryptionConfig.hs",
        "gen/Network/AWS/Synthetics/Types/VisualReferenceInput.hs",
        "gen/Network/AWS/Synthetics/Types/VisualReferenceOutput.hs",
        "gen/Network/AWS/Synthetics/Types/VpcConfigInput.hs",
        "gen/Network/AWS/Synthetics/Types/VpcConfigOutput.hs",
        "gen/Network/AWS/Synthetics/UntagResource.hs",
        "gen/Network/AWS/Synthetics/UpdateCanary.hs",
        "gen/Network/AWS/Synthetics/Waiters.hs",
    ],
    compiler_flags = [
        "-DVERSION_amazonka_synthetics=\"2.0\"",
        "-Wall",
        "-fwarn-incomplete-uni-patterns",
        "-fwarn-incomplete-record-updates",
        "-funbox-strict-fields",
    ],
    hidden_modules = [],
    version = "2.0",
    visibility = ["//visibility:public"],
    deps = [
        "//lib/amazonka",
        "@stackage//:base",
    ],
)

# rule generated from lib/services/amazonka-synthetics/amazonka-synthetics.cabal by gazelle_cabal
haskell_test(
    name = "amazonka-synthetics-test",
    srcs = [
        "test/Main.hs",
        "test/Test/AWS/Gen/Synthetics.hs",
        "test/Test/AWS/Synthetics.hs",
        "test/Test/AWS/Synthetics/Internal.hs",
    ],
    compiler_flags = [
        "-DVERSION_amazonka_synthetics=\"2.0\"",
        "-Wall",
        "-threaded",
    ],
    version = "2.0",
    visibility = ["//visibility:public"],
    deps = [
        ":amazonka-synthetics",
        "//lib/amazonka",
        "//lib/amazonka-test",
        "@stackage//:base",
        "@stackage//:bytestring",
        "@stackage//:case-insensitive",
        "@stackage//:tasty",
        "@stackage//:tasty-hunit",
        "@stackage//:text",
        "@stackage//:time",
        "@stackage//:unordered-containers",
    ],
)
