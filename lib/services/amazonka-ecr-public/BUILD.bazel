load("@rules_haskell//haskell:defs.bzl", "haskell_library", "haskell_test")

# rule generated from lib/services/amazonka-ecr-public/amazonka-ecr-public.cabal by gazelle_cabal
haskell_library(
    name = "amazonka-ecr-public",
    srcs = [
        "gen/Network/AWS/ECRPublic.hs",
        "gen/Network/AWS/ECRPublic/BatchCheckLayerAvailability.hs",
        "gen/Network/AWS/ECRPublic/BatchDeleteImage.hs",
        "gen/Network/AWS/ECRPublic/CompleteLayerUpload.hs",
        "gen/Network/AWS/ECRPublic/CreateRepository.hs",
        "gen/Network/AWS/ECRPublic/DeleteRepository.hs",
        "gen/Network/AWS/ECRPublic/DeleteRepositoryPolicy.hs",
        "gen/Network/AWS/ECRPublic/DescribeImageTags.hs",
        "gen/Network/AWS/ECRPublic/DescribeImages.hs",
        "gen/Network/AWS/ECRPublic/DescribeRegistries.hs",
        "gen/Network/AWS/ECRPublic/DescribeRepositories.hs",
        "gen/Network/AWS/ECRPublic/GetAuthorizationToken.hs",
        "gen/Network/AWS/ECRPublic/GetRegistryCatalogData.hs",
        "gen/Network/AWS/ECRPublic/GetRepositoryCatalogData.hs",
        "gen/Network/AWS/ECRPublic/GetRepositoryPolicy.hs",
        "gen/Network/AWS/ECRPublic/InitiateLayerUpload.hs",
        "gen/Network/AWS/ECRPublic/Lens.hs",
        "gen/Network/AWS/ECRPublic/ListTagsForResource.hs",
        "gen/Network/AWS/ECRPublic/PutImage.hs",
        "gen/Network/AWS/ECRPublic/PutRegistryCatalogData.hs",
        "gen/Network/AWS/ECRPublic/PutRepositoryCatalogData.hs",
        "gen/Network/AWS/ECRPublic/SetRepositoryPolicy.hs",
        "gen/Network/AWS/ECRPublic/TagResource.hs",
        "gen/Network/AWS/ECRPublic/Types.hs",
        "gen/Network/AWS/ECRPublic/Types/AuthorizationData.hs",
        "gen/Network/AWS/ECRPublic/Types/Image.hs",
        "gen/Network/AWS/ECRPublic/Types/ImageDetail.hs",
        "gen/Network/AWS/ECRPublic/Types/ImageFailure.hs",
        "gen/Network/AWS/ECRPublic/Types/ImageFailureCode.hs",
        "gen/Network/AWS/ECRPublic/Types/ImageIdentifier.hs",
        "gen/Network/AWS/ECRPublic/Types/ImageTagDetail.hs",
        "gen/Network/AWS/ECRPublic/Types/Layer.hs",
        "gen/Network/AWS/ECRPublic/Types/LayerAvailability.hs",
        "gen/Network/AWS/ECRPublic/Types/LayerFailure.hs",
        "gen/Network/AWS/ECRPublic/Types/LayerFailureCode.hs",
        "gen/Network/AWS/ECRPublic/Types/ReferencedImageDetail.hs",
        "gen/Network/AWS/ECRPublic/Types/Registry.hs",
        "gen/Network/AWS/ECRPublic/Types/RegistryAlias.hs",
        "gen/Network/AWS/ECRPublic/Types/RegistryAliasStatus.hs",
        "gen/Network/AWS/ECRPublic/Types/RegistryCatalogData.hs",
        "gen/Network/AWS/ECRPublic/Types/Repository.hs",
        "gen/Network/AWS/ECRPublic/Types/RepositoryCatalogData.hs",
        "gen/Network/AWS/ECRPublic/Types/RepositoryCatalogDataInput.hs",
        "gen/Network/AWS/ECRPublic/Types/Tag.hs",
        "gen/Network/AWS/ECRPublic/UntagResource.hs",
        "gen/Network/AWS/ECRPublic/UploadLayerPart.hs",
        "gen/Network/AWS/ECRPublic/Waiters.hs",
    ],
    compiler_flags = [
        "-DVERSION_amazonka_ecr_public=\"2.0\"",
        "-Wall",
        "-fwarn-incomplete-uni-patterns",
        "-fwarn-incomplete-record-updates",
        "-funbox-strict-fields",
    ],
    hidden_modules = [],
    version = "2.0",
    visibility = ["//visibility:public"],
    deps = [
        "//lib/amazonka",
        "@stackage//:base",
    ],
)

# rule generated from lib/services/amazonka-ecr-public/amazonka-ecr-public.cabal by gazelle_cabal
haskell_test(
    name = "amazonka-ecr-public-test",
    srcs = [
        "test/Main.hs",
        "test/Test/AWS/ECRPublic.hs",
        "test/Test/AWS/ECRPublic/Internal.hs",
        "test/Test/AWS/Gen/ECRPublic.hs",
    ],
    compiler_flags = [
        "-DVERSION_amazonka_ecr_public=\"2.0\"",
        "-Wall",
        "-threaded",
    ],
    version = "2.0",
    visibility = ["//visibility:public"],
    deps = [
        ":amazonka-ecr-public",
        "//lib/amazonka",
        "//lib/amazonka-test",
        "@stackage//:base",
        "@stackage//:bytestring",
        "@stackage//:case-insensitive",
        "@stackage//:tasty",
        "@stackage//:tasty-hunit",
        "@stackage//:text",
        "@stackage//:time",
        "@stackage//:unordered-containers",
    ],
)
