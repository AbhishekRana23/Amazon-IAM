load("@rules_haskell//haskell:defs.bzl", "haskell_doc")
load(
    "@build_stack_rules_hugo//hugo:rules.bzl",
    "hugo_serve",
    "hugo_site",
    "hugo_theme",
)

hugo_theme(
    name = "theme",
    srcs = [
        "@hugo_theme_kube//:files",
    ],
)

hugo_site(
    name = "docs",
    config = "config.toml",
    content = glob(["content/**/*"]),
    data = [":packages"],
    hugo = "@nixpkgs_hugo//:bin/hugo",
    layouts = glob(["layouts/**/*"]),
    static = [":static"] + glob(["static/**/*"]),
    theme = ":theme",
)

hugo_serve(
    name = "serve",
    dep = [":docs"],
    hugo = "@nixpkgs_hugo//:bin/hugo",
)

haskell_doc(
    # Target name is important, otherwise `hugo_site` won't copy over the files
    # if they don't have the expected directory prefix. This could be made more
    # robust by using `rules_pkg/mappings.bzl:pkg_files` to assemble the directory.
    name = "static",
    tags = ["ci"],
    visibility = ["//visibility:public"],
    # deps is auto-populated by the buildozer command in scripts/generate.
    deps = [
        "//amazonka",
        "//amazonka-alexa-business",
        "//amazonka-apigateway",
        "//amazonka-apigatewaymanagementapi",
        "//amazonka-application-autoscaling",
        "//amazonka-appstream",
        "//amazonka-appsync",
        "//amazonka-athena",
        "//amazonka-autoscaling",
        "//amazonka-autoscaling-plans",
        "//amazonka-batch",
        "//amazonka-budgets",
        "//amazonka-certificatemanager",
        "//amazonka-certificatemanager-pca",
        "//amazonka-cloud9",
        "//amazonka-clouddirectory",
        "//amazonka-cloudformation",
        "//amazonka-cloudfront",
        "//amazonka-cloudhsm",
        "//amazonka-cloudhsmv2",
        "//amazonka-cloudsearch",
        "//amazonka-cloudsearch-domains",
        "//amazonka-cloudtrail",
        "//amazonka-cloudwatch",
        "//amazonka-cloudwatch-events",
        "//amazonka-cloudwatch-logs",
        "//amazonka-codebuild",
        "//amazonka-codecommit",
        "//amazonka-codedeploy",
        "//amazonka-codepipeline",
        "//amazonka-codestar",
        "//amazonka-cognito-identity",
        "//amazonka-cognito-idp",
        "//amazonka-cognito-sync",
        "//amazonka-comprehend",
        "//amazonka-config",
        "//amazonka-connect",
        "//amazonka-cost-explorer",
        "//amazonka-cur",
        "//amazonka-datapipeline",
        "//amazonka-devicefarm",
        "//amazonka-directconnect",
        "//amazonka-discovery",
        "//amazonka-dms",
        "//amazonka-ds",
        "//amazonka-dynamodb",
        "//amazonka-dynamodb-dax",
        "//amazonka-dynamodb-streams",
        "//amazonka-ec2",
        "//amazonka-ecr",
        "//amazonka-ecs",
        "//amazonka-efs",
        "//amazonka-eks",
        "//amazonka-elasticache",
        "//amazonka-elasticbeanstalk",
        "//amazonka-elasticsearch",
        "//amazonka-elastictranscoder",
        "//amazonka-elb",
        "//amazonka-elbv2",
        "//amazonka-emr",
        "//amazonka-fms",
        "//amazonka-gamelift",
        "//amazonka-glacier",
        "//amazonka-glue",
        "//amazonka-greengrass",
        "//amazonka-guardduty",
        "//amazonka-health",
        "//amazonka-iam",
        "//amazonka-importexport",
        "//amazonka-inspector",
        "//amazonka-iot",
        "//amazonka-iot-analytics",
        "//amazonka-iot-dataplane",
        "//amazonka-iot-jobs-dataplane",
        "//amazonka-kinesis",
        "//amazonka-kinesis-analytics",
        "//amazonka-kinesis-firehose",
        "//amazonka-kinesis-video",
        "//amazonka-kinesis-video-archived-media",
        "//amazonka-kinesis-video-media",
        "//amazonka-kms",
        "//amazonka-lambda",
        "//amazonka-lex-models",
        "//amazonka-lex-runtime",
        "//amazonka-lightsail",
        "//amazonka-marketplace-analytics",
        "//amazonka-marketplace-entitlement",
        "//amazonka-marketplace-metering",
        "//amazonka-mechanicalturk",
        "//amazonka-mediaconvert",
        "//amazonka-medialive",
        "//amazonka-mediapackage",
        "//amazonka-mediastore",
        "//amazonka-mediastore-dataplane",
        "//amazonka-migrationhub",
        "//amazonka-ml",
        "//amazonka-mobile",
        "//amazonka-mq",
        "//amazonka-opsworks",
        "//amazonka-opsworks-cm",
        "//amazonka-organizations",
        "//amazonka-pinpoint",
        "//amazonka-polly",
        "//amazonka-pricing",
        "//amazonka-qldb",
        "//amazonka-rds",
        "//amazonka-redshift",
        "//amazonka-rekognition",
        "//amazonka-resourcegroups",
        "//amazonka-resourcegroupstagging",
        "//amazonka-route53",
        "//amazonka-route53-autonaming",
        "//amazonka-route53-domains",
        "//amazonka-s3",
        "//amazonka-s3-encryption",
        "//amazonka-sagemaker",
        "//amazonka-sagemaker-runtime",
        "//amazonka-sdb",
        "//amazonka-secretsmanager",
        "//amazonka-serverlessrepo",
        "//amazonka-servicecatalog",
        "//amazonka-ses",
        "//amazonka-sesv2",
        "//amazonka-shield",
        "//amazonka-sms",
        "//amazonka-snowball",
        "//amazonka-sns",
        "//amazonka-sqs",
        "//amazonka-ssm",
        "//amazonka-stepfunctions",
        "//amazonka-storagegateway",
        "//amazonka-sts",
        "//amazonka-support",
        "//amazonka-swf",
        "//amazonka-textract",
        "//amazonka-transcribe",
        "//amazonka-translate",
        "//amazonka-waf",
        "//amazonka-waf-regional",
        "//amazonka-workdocs",
        "//amazonka-workmail",
        "//amazonka-workspaces",
        "//amazonka-xray",
        "//examples:amazonka-examples",
    ],
)

# Generate a hugo data mapping from the list of hadock directories.
genrule(
    name = "packages",
    srcs = [":static"],
    outs = ["data/packages.yaml"],
    cmd = """
printf 'haddock:\n' >> $@

for dir in $(locations :static); do
  dir="$${dir##*/}"
  pkg="$${dir%ZS*}"

  if [[ $$pkg != amazonka* ]]; then
     continue
  fi

  printf '  %s: %s\n' "$$pkg" "$$dir" >> $@
done
""",
    visibility = ["//visibility:public"],
)
