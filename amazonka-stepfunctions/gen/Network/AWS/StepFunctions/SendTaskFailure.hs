{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE StrictData #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.StepFunctions.SendTaskFailure
-- Copyright   : (c) 2013-2021 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Used by activity workers and task states using the
-- <https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#connect-wait-token callback>
-- pattern to report that the task identified by the @taskToken@ failed.
module Network.AWS.StepFunctions.SendTaskFailure
  ( -- * Creating a Request
    SendTaskFailure (..),
    newSendTaskFailure,

    -- * Request Lenses
    sendTaskFailure_cause,
    sendTaskFailure_error,
    sendTaskFailure_taskToken,

    -- * Destructuring the Response
    SendTaskFailureResponse (..),
    newSendTaskFailureResponse,

    -- * Response Lenses
    sendTaskFailureResponse_httpStatus,
  )
where

import qualified Network.AWS.Core as Core
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Request as Request
import qualified Network.AWS.Response as Response
import Network.AWS.StepFunctions.Types

-- | /See:/ 'newSendTaskFailure' smart constructor.
data SendTaskFailure = SendTaskFailure'
  { -- | A more detailed explanation of the cause of the failure.
    cause :: Core.Maybe (Core.Sensitive Core.Text),
    -- | The error code of the failure.
    error :: Core.Maybe (Core.Sensitive Core.Text),
    -- | The token that represents this task. Task tokens are generated by Step
    -- Functions when tasks are assigned to a worker, or in the
    -- <https://docs.aws.amazon.com/step-functions/latest/dg/input-output-contextobject.html context object>
    -- when a workflow enters a task state. See
    -- GetActivityTaskOutput$taskToken.
    taskToken :: Core.Text
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- |
-- Create a value of 'SendTaskFailure' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'cause', 'sendTaskFailure_cause' - A more detailed explanation of the cause of the failure.
--
-- 'error', 'sendTaskFailure_error' - The error code of the failure.
--
-- 'taskToken', 'sendTaskFailure_taskToken' - The token that represents this task. Task tokens are generated by Step
-- Functions when tasks are assigned to a worker, or in the
-- <https://docs.aws.amazon.com/step-functions/latest/dg/input-output-contextobject.html context object>
-- when a workflow enters a task state. See
-- GetActivityTaskOutput$taskToken.
newSendTaskFailure ::
  -- | 'taskToken'
  Core.Text ->
  SendTaskFailure
newSendTaskFailure pTaskToken_ =
  SendTaskFailure'
    { cause = Core.Nothing,
      error = Core.Nothing,
      taskToken = pTaskToken_
    }

-- | A more detailed explanation of the cause of the failure.
sendTaskFailure_cause :: Lens.Lens' SendTaskFailure (Core.Maybe Core.Text)
sendTaskFailure_cause = Lens.lens (\SendTaskFailure' {cause} -> cause) (\s@SendTaskFailure' {} a -> s {cause = a} :: SendTaskFailure) Core.. Lens.mapping Core._Sensitive

-- | The error code of the failure.
sendTaskFailure_error :: Lens.Lens' SendTaskFailure (Core.Maybe Core.Text)
sendTaskFailure_error = Lens.lens (\SendTaskFailure' {error} -> error) (\s@SendTaskFailure' {} a -> s {error = a} :: SendTaskFailure) Core.. Lens.mapping Core._Sensitive

-- | The token that represents this task. Task tokens are generated by Step
-- Functions when tasks are assigned to a worker, or in the
-- <https://docs.aws.amazon.com/step-functions/latest/dg/input-output-contextobject.html context object>
-- when a workflow enters a task state. See
-- GetActivityTaskOutput$taskToken.
sendTaskFailure_taskToken :: Lens.Lens' SendTaskFailure Core.Text
sendTaskFailure_taskToken = Lens.lens (\SendTaskFailure' {taskToken} -> taskToken) (\s@SendTaskFailure' {} a -> s {taskToken = a} :: SendTaskFailure)

instance Core.AWSRequest SendTaskFailure where
  type
    AWSResponse SendTaskFailure =
      SendTaskFailureResponse
  request = Request.postJSON defaultService
  response =
    Response.receiveEmpty
      ( \s h x ->
          SendTaskFailureResponse'
            Core.<$> (Core.pure (Core.fromEnum s))
      )

instance Core.Hashable SendTaskFailure

instance Core.NFData SendTaskFailure

instance Core.ToHeaders SendTaskFailure where
  toHeaders =
    Core.const
      ( Core.mconcat
          [ "X-Amz-Target"
              Core.=# ( "AWSStepFunctions.SendTaskFailure" ::
                          Core.ByteString
                      ),
            "Content-Type"
              Core.=# ("application/x-amz-json-1.0" :: Core.ByteString)
          ]
      )

instance Core.ToJSON SendTaskFailure where
  toJSON SendTaskFailure' {..} =
    Core.object
      ( Core.catMaybes
          [ ("cause" Core..=) Core.<$> cause,
            ("error" Core..=) Core.<$> error,
            Core.Just ("taskToken" Core..= taskToken)
          ]
      )

instance Core.ToPath SendTaskFailure where
  toPath = Core.const "/"

instance Core.ToQuery SendTaskFailure where
  toQuery = Core.const Core.mempty

-- | /See:/ 'newSendTaskFailureResponse' smart constructor.
data SendTaskFailureResponse = SendTaskFailureResponse'
  { -- | The response's http status code.
    httpStatus :: Core.Int
  }
  deriving (Core.Eq, Core.Read, Core.Show, Core.Generic)

-- |
-- Create a value of 'SendTaskFailureResponse' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'httpStatus', 'sendTaskFailureResponse_httpStatus' - The response's http status code.
newSendTaskFailureResponse ::
  -- | 'httpStatus'
  Core.Int ->
  SendTaskFailureResponse
newSendTaskFailureResponse pHttpStatus_ =
  SendTaskFailureResponse' {httpStatus = pHttpStatus_}

-- | The response's http status code.
sendTaskFailureResponse_httpStatus :: Lens.Lens' SendTaskFailureResponse Core.Int
sendTaskFailureResponse_httpStatus = Lens.lens (\SendTaskFailureResponse' {httpStatus} -> httpStatus) (\s@SendTaskFailureResponse' {} a -> s {httpStatus = a} :: SendTaskFailureResponse)

instance Core.NFData SendTaskFailureResponse
