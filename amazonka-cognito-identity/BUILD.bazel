load("@rules_haskell//haskell:defs.bzl", "haskell_library", "haskell_test")

# rule generated from amazonka-cognito-identity/amazonka-cognito-identity.cabal by gazelle_cabal
haskell_library(
    name = "amazonka-cognito-identity",
    srcs = [
        "gen/Network/AWS/CognitoIdentity.hs",
        "gen/Network/AWS/CognitoIdentity/CreateIdentityPool.hs",
        "gen/Network/AWS/CognitoIdentity/DeleteIdentities.hs",
        "gen/Network/AWS/CognitoIdentity/DeleteIdentityPool.hs",
        "gen/Network/AWS/CognitoIdentity/DescribeIdentity.hs",
        "gen/Network/AWS/CognitoIdentity/DescribeIdentityPool.hs",
        "gen/Network/AWS/CognitoIdentity/GetCredentialsForIdentity.hs",
        "gen/Network/AWS/CognitoIdentity/GetId.hs",
        "gen/Network/AWS/CognitoIdentity/GetIdentityPoolRoles.hs",
        "gen/Network/AWS/CognitoIdentity/GetOpenIdToken.hs",
        "gen/Network/AWS/CognitoIdentity/GetOpenIdTokenForDeveloperIdentity.hs",
        "gen/Network/AWS/CognitoIdentity/GetPrincipalTagAttributeMap.hs",
        "gen/Network/AWS/CognitoIdentity/Lens.hs",
        "gen/Network/AWS/CognitoIdentity/ListIdentities.hs",
        "gen/Network/AWS/CognitoIdentity/ListIdentityPools.hs",
        "gen/Network/AWS/CognitoIdentity/ListTagsForResource.hs",
        "gen/Network/AWS/CognitoIdentity/LookupDeveloperIdentity.hs",
        "gen/Network/AWS/CognitoIdentity/MergeDeveloperIdentities.hs",
        "gen/Network/AWS/CognitoIdentity/SetIdentityPoolRoles.hs",
        "gen/Network/AWS/CognitoIdentity/SetPrincipalTagAttributeMap.hs",
        "gen/Network/AWS/CognitoIdentity/TagResource.hs",
        "gen/Network/AWS/CognitoIdentity/Types.hs",
        "gen/Network/AWS/CognitoIdentity/Types/AmbiguousRoleResolutionType.hs",
        "gen/Network/AWS/CognitoIdentity/Types/CognitoErrorCode.hs",
        "gen/Network/AWS/CognitoIdentity/Types/CognitoIdentityProvider.hs",
        "gen/Network/AWS/CognitoIdentity/Types/Credentials.hs",
        "gen/Network/AWS/CognitoIdentity/Types/IdentityDescription.hs",
        "gen/Network/AWS/CognitoIdentity/Types/IdentityPool.hs",
        "gen/Network/AWS/CognitoIdentity/Types/IdentityPoolShortDescription.hs",
        "gen/Network/AWS/CognitoIdentity/Types/MappingRule.hs",
        "gen/Network/AWS/CognitoIdentity/Types/MappingRuleMatchType.hs",
        "gen/Network/AWS/CognitoIdentity/Types/RoleMapping.hs",
        "gen/Network/AWS/CognitoIdentity/Types/RoleMappingType.hs",
        "gen/Network/AWS/CognitoIdentity/Types/RulesConfigurationType.hs",
        "gen/Network/AWS/CognitoIdentity/Types/UnprocessedIdentityId.hs",
        "gen/Network/AWS/CognitoIdentity/UnlinkDeveloperIdentity.hs",
        "gen/Network/AWS/CognitoIdentity/UnlinkIdentity.hs",
        "gen/Network/AWS/CognitoIdentity/UntagResource.hs",
        "gen/Network/AWS/CognitoIdentity/UpdateIdentityPool.hs",
        "gen/Network/AWS/CognitoIdentity/Waiters.hs",
    ],
    compiler_flags = [
        "-DVERSION_amazonka_cognito_identity=\"1.6.1\"",
        "-Wall",
        "-fwarn-incomplete-uni-patterns",
        "-fwarn-incomplete-record-updates",
        "-funbox-strict-fields",
    ],
    hidden_modules = [],
    version = "1.6.1",
    visibility = ["//visibility:public"],
    deps = [
        "//amazonka",
        "@stackage//:base",
    ],
)

# rule generated from amazonka-cognito-identity/amazonka-cognito-identity.cabal by gazelle_cabal
haskell_test(
    name = "amazonka-cognito-identity-test",
    srcs = [
        "test/Main.hs",
        "test/Test/AWS/CognitoIdentity.hs",
        "test/Test/AWS/CognitoIdentity/Internal.hs",
        "test/Test/AWS/Gen/CognitoIdentity.hs",
    ],
    compiler_flags = [
        "-DVERSION_amazonka_cognito_identity=\"1.6.1\"",
        "-Wall",
        "-threaded",
    ],
    version = "1.6.1",
    visibility = ["//visibility:public"],
    deps = [
        ":amazonka-cognito-identity",
        "//amazonka",
        "//test:amazonka-test",
        "@stackage//:base",
        "@stackage//:bytestring",
        "@stackage//:case-insensitive",
        "@stackage//:tasty",
        "@stackage//:tasty-hunit",
        "@stackage//:text",
        "@stackage//:time",
        "@stackage//:unordered-containers",
    ],
)
