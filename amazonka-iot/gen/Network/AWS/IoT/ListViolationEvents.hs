{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE StrictData #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.IoT.ListViolationEvents
-- Copyright   : (c) 2013-2021 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Lists the Device Defender security profile violations discovered during
-- the given time period. You can use filters to limit the results to those
-- alerts issued for a particular security profile, behavior, or thing
-- (device).
--
-- This operation returns paginated results.
module Network.AWS.IoT.ListViolationEvents
  ( -- * Creating a Request
    ListViolationEvents (..),
    newListViolationEvents,

    -- * Request Lenses
    listViolationEvents_nextToken,
    listViolationEvents_maxResults,
    listViolationEvents_thingName,
    listViolationEvents_securityProfileName,
    listViolationEvents_listSuppressedAlerts,
    listViolationEvents_behaviorCriteriaType,
    listViolationEvents_startTime,
    listViolationEvents_endTime,

    -- * Destructuring the Response
    ListViolationEventsResponse (..),
    newListViolationEventsResponse,

    -- * Response Lenses
    listViolationEventsResponse_nextToken,
    listViolationEventsResponse_violationEvents,
    listViolationEventsResponse_httpStatus,
  )
where

import qualified Network.AWS.Core as Core
import Network.AWS.IoT.Types
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Request as Request
import qualified Network.AWS.Response as Response

-- | /See:/ 'newListViolationEvents' smart constructor.
data ListViolationEvents = ListViolationEvents'
  { -- | The token for the next set of results.
    nextToken :: Core.Maybe Core.Text,
    -- | The maximum number of results to return at one time.
    maxResults :: Core.Maybe Core.Natural,
    -- | A filter to limit results to those alerts caused by the specified thing.
    thingName :: Core.Maybe Core.Text,
    -- | A filter to limit results to those alerts generated by the specified
    -- security profile.
    securityProfileName :: Core.Maybe Core.Text,
    -- | A list of all suppressed alerts.
    listSuppressedAlerts :: Core.Maybe Core.Bool,
    -- | The criteria for a behavior.
    behaviorCriteriaType :: Core.Maybe BehaviorCriteriaType,
    -- | The start time for the alerts to be listed.
    startTime :: Core.POSIX,
    -- | The end time for the alerts to be listed.
    endTime :: Core.POSIX
  }
  deriving (Core.Eq, Core.Read, Core.Show, Core.Generic)

-- |
-- Create a value of 'ListViolationEvents' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'nextToken', 'listViolationEvents_nextToken' - The token for the next set of results.
--
-- 'maxResults', 'listViolationEvents_maxResults' - The maximum number of results to return at one time.
--
-- 'thingName', 'listViolationEvents_thingName' - A filter to limit results to those alerts caused by the specified thing.
--
-- 'securityProfileName', 'listViolationEvents_securityProfileName' - A filter to limit results to those alerts generated by the specified
-- security profile.
--
-- 'listSuppressedAlerts', 'listViolationEvents_listSuppressedAlerts' - A list of all suppressed alerts.
--
-- 'behaviorCriteriaType', 'listViolationEvents_behaviorCriteriaType' - The criteria for a behavior.
--
-- 'startTime', 'listViolationEvents_startTime' - The start time for the alerts to be listed.
--
-- 'endTime', 'listViolationEvents_endTime' - The end time for the alerts to be listed.
newListViolationEvents ::
  -- | 'startTime'
  Core.UTCTime ->
  -- | 'endTime'
  Core.UTCTime ->
  ListViolationEvents
newListViolationEvents pStartTime_ pEndTime_ =
  ListViolationEvents'
    { nextToken = Core.Nothing,
      maxResults = Core.Nothing,
      thingName = Core.Nothing,
      securityProfileName = Core.Nothing,
      listSuppressedAlerts = Core.Nothing,
      behaviorCriteriaType = Core.Nothing,
      startTime = Core._Time Lens.# pStartTime_,
      endTime = Core._Time Lens.# pEndTime_
    }

-- | The token for the next set of results.
listViolationEvents_nextToken :: Lens.Lens' ListViolationEvents (Core.Maybe Core.Text)
listViolationEvents_nextToken = Lens.lens (\ListViolationEvents' {nextToken} -> nextToken) (\s@ListViolationEvents' {} a -> s {nextToken = a} :: ListViolationEvents)

-- | The maximum number of results to return at one time.
listViolationEvents_maxResults :: Lens.Lens' ListViolationEvents (Core.Maybe Core.Natural)
listViolationEvents_maxResults = Lens.lens (\ListViolationEvents' {maxResults} -> maxResults) (\s@ListViolationEvents' {} a -> s {maxResults = a} :: ListViolationEvents)

-- | A filter to limit results to those alerts caused by the specified thing.
listViolationEvents_thingName :: Lens.Lens' ListViolationEvents (Core.Maybe Core.Text)
listViolationEvents_thingName = Lens.lens (\ListViolationEvents' {thingName} -> thingName) (\s@ListViolationEvents' {} a -> s {thingName = a} :: ListViolationEvents)

-- | A filter to limit results to those alerts generated by the specified
-- security profile.
listViolationEvents_securityProfileName :: Lens.Lens' ListViolationEvents (Core.Maybe Core.Text)
listViolationEvents_securityProfileName = Lens.lens (\ListViolationEvents' {securityProfileName} -> securityProfileName) (\s@ListViolationEvents' {} a -> s {securityProfileName = a} :: ListViolationEvents)

-- | A list of all suppressed alerts.
listViolationEvents_listSuppressedAlerts :: Lens.Lens' ListViolationEvents (Core.Maybe Core.Bool)
listViolationEvents_listSuppressedAlerts = Lens.lens (\ListViolationEvents' {listSuppressedAlerts} -> listSuppressedAlerts) (\s@ListViolationEvents' {} a -> s {listSuppressedAlerts = a} :: ListViolationEvents)

-- | The criteria for a behavior.
listViolationEvents_behaviorCriteriaType :: Lens.Lens' ListViolationEvents (Core.Maybe BehaviorCriteriaType)
listViolationEvents_behaviorCriteriaType = Lens.lens (\ListViolationEvents' {behaviorCriteriaType} -> behaviorCriteriaType) (\s@ListViolationEvents' {} a -> s {behaviorCriteriaType = a} :: ListViolationEvents)

-- | The start time for the alerts to be listed.
listViolationEvents_startTime :: Lens.Lens' ListViolationEvents Core.UTCTime
listViolationEvents_startTime = Lens.lens (\ListViolationEvents' {startTime} -> startTime) (\s@ListViolationEvents' {} a -> s {startTime = a} :: ListViolationEvents) Core.. Core._Time

-- | The end time for the alerts to be listed.
listViolationEvents_endTime :: Lens.Lens' ListViolationEvents Core.UTCTime
listViolationEvents_endTime = Lens.lens (\ListViolationEvents' {endTime} -> endTime) (\s@ListViolationEvents' {} a -> s {endTime = a} :: ListViolationEvents) Core.. Core._Time

instance Core.AWSPager ListViolationEvents where
  page rq rs
    | Core.stop
        ( rs
            Lens.^? listViolationEventsResponse_nextToken
              Core.. Lens._Just
        ) =
      Core.Nothing
    | Core.stop
        ( rs
            Lens.^? listViolationEventsResponse_violationEvents
              Core.. Lens._Just
        ) =
      Core.Nothing
    | Core.otherwise =
      Core.Just Core.$
        rq
          Lens.& listViolationEvents_nextToken
          Lens..~ rs
          Lens.^? listViolationEventsResponse_nextToken
            Core.. Lens._Just

instance Core.AWSRequest ListViolationEvents where
  type
    AWSResponse ListViolationEvents =
      ListViolationEventsResponse
  request = Request.get defaultService
  response =
    Response.receiveJSON
      ( \s h x ->
          ListViolationEventsResponse'
            Core.<$> (x Core..?> "nextToken")
            Core.<*> (x Core..?> "violationEvents" Core..!@ Core.mempty)
            Core.<*> (Core.pure (Core.fromEnum s))
      )

instance Core.Hashable ListViolationEvents

instance Core.NFData ListViolationEvents

instance Core.ToHeaders ListViolationEvents where
  toHeaders = Core.const Core.mempty

instance Core.ToPath ListViolationEvents where
  toPath = Core.const "/violation-events"

instance Core.ToQuery ListViolationEvents where
  toQuery ListViolationEvents' {..} =
    Core.mconcat
      [ "nextToken" Core.=: nextToken,
        "maxResults" Core.=: maxResults,
        "thingName" Core.=: thingName,
        "securityProfileName" Core.=: securityProfileName,
        "listSuppressedAlerts" Core.=: listSuppressedAlerts,
        "behaviorCriteriaType" Core.=: behaviorCriteriaType,
        "startTime" Core.=: startTime,
        "endTime" Core.=: endTime
      ]

-- | /See:/ 'newListViolationEventsResponse' smart constructor.
data ListViolationEventsResponse = ListViolationEventsResponse'
  { -- | A token that can be used to retrieve the next set of results, or @null@
    -- if there are no additional results.
    nextToken :: Core.Maybe Core.Text,
    -- | The security profile violation alerts issued for this account during the
    -- given time period, potentially filtered by security profile, behavior
    -- violated, or thing (device) violating.
    violationEvents :: Core.Maybe [ViolationEvent],
    -- | The response's http status code.
    httpStatus :: Core.Int
  }
  deriving (Core.Eq, Core.Read, Core.Show, Core.Generic)

-- |
-- Create a value of 'ListViolationEventsResponse' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'nextToken', 'listViolationEventsResponse_nextToken' - A token that can be used to retrieve the next set of results, or @null@
-- if there are no additional results.
--
-- 'violationEvents', 'listViolationEventsResponse_violationEvents' - The security profile violation alerts issued for this account during the
-- given time period, potentially filtered by security profile, behavior
-- violated, or thing (device) violating.
--
-- 'httpStatus', 'listViolationEventsResponse_httpStatus' - The response's http status code.
newListViolationEventsResponse ::
  -- | 'httpStatus'
  Core.Int ->
  ListViolationEventsResponse
newListViolationEventsResponse pHttpStatus_ =
  ListViolationEventsResponse'
    { nextToken =
        Core.Nothing,
      violationEvents = Core.Nothing,
      httpStatus = pHttpStatus_
    }

-- | A token that can be used to retrieve the next set of results, or @null@
-- if there are no additional results.
listViolationEventsResponse_nextToken :: Lens.Lens' ListViolationEventsResponse (Core.Maybe Core.Text)
listViolationEventsResponse_nextToken = Lens.lens (\ListViolationEventsResponse' {nextToken} -> nextToken) (\s@ListViolationEventsResponse' {} a -> s {nextToken = a} :: ListViolationEventsResponse)

-- | The security profile violation alerts issued for this account during the
-- given time period, potentially filtered by security profile, behavior
-- violated, or thing (device) violating.
listViolationEventsResponse_violationEvents :: Lens.Lens' ListViolationEventsResponse (Core.Maybe [ViolationEvent])
listViolationEventsResponse_violationEvents = Lens.lens (\ListViolationEventsResponse' {violationEvents} -> violationEvents) (\s@ListViolationEventsResponse' {} a -> s {violationEvents = a} :: ListViolationEventsResponse) Core.. Lens.mapping Lens._Coerce

-- | The response's http status code.
listViolationEventsResponse_httpStatus :: Lens.Lens' ListViolationEventsResponse Core.Int
listViolationEventsResponse_httpStatus = Lens.lens (\ListViolationEventsResponse' {httpStatus} -> httpStatus) (\s@ListViolationEventsResponse' {} a -> s {httpStatus = a} :: ListViolationEventsResponse)

instance Core.NFData ListViolationEventsResponse
