{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE StrictData #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.CloudWatchLogs.Types.ResultField
-- Copyright   : (c) 2013-2021 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
module Network.AWS.CloudWatchLogs.Types.ResultField where

import qualified Network.AWS.Core as Core
import qualified Network.AWS.Lens as Lens

-- | Contains one field from one log event returned by a CloudWatch Logs
-- Insights query, along with the value of that field.
--
-- For more information about the fields that are generated by CloudWatch
-- logs, see
-- <https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_AnalyzeLogData-discoverable-fields.html Supported Logs and Discovered Fields>.
--
-- /See:/ 'newResultField' smart constructor.
data ResultField = ResultField'
  { -- | The value of this field.
    value :: Core.Maybe Core.Text,
    -- | The log event field.
    field :: Core.Maybe Core.Text
  }
  deriving (Core.Eq, Core.Read, Core.Show, Core.Generic)

-- |
-- Create a value of 'ResultField' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'value', 'resultField_value' - The value of this field.
--
-- 'field', 'resultField_field' - The log event field.
newResultField ::
  ResultField
newResultField =
  ResultField'
    { value = Core.Nothing,
      field = Core.Nothing
    }

-- | The value of this field.
resultField_value :: Lens.Lens' ResultField (Core.Maybe Core.Text)
resultField_value = Lens.lens (\ResultField' {value} -> value) (\s@ResultField' {} a -> s {value = a} :: ResultField)

-- | The log event field.
resultField_field :: Lens.Lens' ResultField (Core.Maybe Core.Text)
resultField_field = Lens.lens (\ResultField' {field} -> field) (\s@ResultField' {} a -> s {field = a} :: ResultField)

instance Core.FromJSON ResultField where
  parseJSON =
    Core.withObject
      "ResultField"
      ( \x ->
          ResultField'
            Core.<$> (x Core..:? "value") Core.<*> (x Core..:? "field")
      )

instance Core.Hashable ResultField

instance Core.NFData ResultField
