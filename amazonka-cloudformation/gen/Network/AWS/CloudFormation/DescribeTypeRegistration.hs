{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE StrictData #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.CloudFormation.DescribeTypeRegistration
-- Copyright   : (c) 2013-2021 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Returns information about an extension\'s registration, including its
-- current status and type and version identifiers.
--
-- When you initiate a registration request using @ RegisterType @, you can
-- then use @ DescribeTypeRegistration @ to monitor the progress of that
-- registration request.
--
-- Once the registration request has completed, use @ DescribeType @ to
-- return detailed information about an extension.
module Network.AWS.CloudFormation.DescribeTypeRegistration
  ( -- * Creating a Request
    DescribeTypeRegistration (..),
    newDescribeTypeRegistration,

    -- * Request Lenses
    describeTypeRegistration_registrationToken,

    -- * Destructuring the Response
    DescribeTypeRegistrationResponse (..),
    newDescribeTypeRegistrationResponse,

    -- * Response Lenses
    describeTypeRegistrationResponse_typeVersionArn,
    describeTypeRegistrationResponse_progressStatus,
    describeTypeRegistrationResponse_description,
    describeTypeRegistrationResponse_typeArn,
    describeTypeRegistrationResponse_httpStatus,
  )
where

import Network.AWS.CloudFormation.Types
import qualified Network.AWS.Core as Core
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Request as Request
import qualified Network.AWS.Response as Response

-- | /See:/ 'newDescribeTypeRegistration' smart constructor.
data DescribeTypeRegistration = DescribeTypeRegistration'
  { -- | The identifier for this registration request.
    --
    -- This registration token is generated by CloudFormation when you initiate
    -- a registration request using @ RegisterType @.
    registrationToken :: Core.Text
  }
  deriving (Core.Eq, Core.Read, Core.Show, Core.Generic)

-- |
-- Create a value of 'DescribeTypeRegistration' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'registrationToken', 'describeTypeRegistration_registrationToken' - The identifier for this registration request.
--
-- This registration token is generated by CloudFormation when you initiate
-- a registration request using @ RegisterType @.
newDescribeTypeRegistration ::
  -- | 'registrationToken'
  Core.Text ->
  DescribeTypeRegistration
newDescribeTypeRegistration pRegistrationToken_ =
  DescribeTypeRegistration'
    { registrationToken =
        pRegistrationToken_
    }

-- | The identifier for this registration request.
--
-- This registration token is generated by CloudFormation when you initiate
-- a registration request using @ RegisterType @.
describeTypeRegistration_registrationToken :: Lens.Lens' DescribeTypeRegistration Core.Text
describeTypeRegistration_registrationToken = Lens.lens (\DescribeTypeRegistration' {registrationToken} -> registrationToken) (\s@DescribeTypeRegistration' {} a -> s {registrationToken = a} :: DescribeTypeRegistration)

instance Core.AWSRequest DescribeTypeRegistration where
  type
    AWSResponse DescribeTypeRegistration =
      DescribeTypeRegistrationResponse
  request = Request.postQuery defaultService
  response =
    Response.receiveXMLWrapper
      "DescribeTypeRegistrationResult"
      ( \s h x ->
          DescribeTypeRegistrationResponse'
            Core.<$> (x Core..@? "TypeVersionArn")
            Core.<*> (x Core..@? "ProgressStatus")
            Core.<*> (x Core..@? "Description")
            Core.<*> (x Core..@? "TypeArn")
            Core.<*> (Core.pure (Core.fromEnum s))
      )

instance Core.Hashable DescribeTypeRegistration

instance Core.NFData DescribeTypeRegistration

instance Core.ToHeaders DescribeTypeRegistration where
  toHeaders = Core.const Core.mempty

instance Core.ToPath DescribeTypeRegistration where
  toPath = Core.const "/"

instance Core.ToQuery DescribeTypeRegistration where
  toQuery DescribeTypeRegistration' {..} =
    Core.mconcat
      [ "Action"
          Core.=: ("DescribeTypeRegistration" :: Core.ByteString),
        "Version" Core.=: ("2010-05-15" :: Core.ByteString),
        "RegistrationToken" Core.=: registrationToken
      ]

-- | /See:/ 'newDescribeTypeRegistrationResponse' smart constructor.
data DescribeTypeRegistrationResponse = DescribeTypeRegistrationResponse'
  { -- | The Amazon Resource Name (ARN) of this specific version of the extension
    -- being registered.
    --
    -- For registration requests with a @ProgressStatus@ of other than
    -- @COMPLETE@, this will be @null@.
    typeVersionArn :: Core.Maybe Core.Text,
    -- | The current status of the extension registration request.
    progressStatus :: Core.Maybe RegistrationStatus,
    -- | The description of the extension registration request.
    description :: Core.Maybe Core.Text,
    -- | The Amazon Resource Name (ARN) of the extension being registered.
    --
    -- For registration requests with a @ProgressStatus@ of other than
    -- @COMPLETE@, this will be @null@.
    typeArn :: Core.Maybe Core.Text,
    -- | The response's http status code.
    httpStatus :: Core.Int
  }
  deriving (Core.Eq, Core.Read, Core.Show, Core.Generic)

-- |
-- Create a value of 'DescribeTypeRegistrationResponse' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'typeVersionArn', 'describeTypeRegistrationResponse_typeVersionArn' - The Amazon Resource Name (ARN) of this specific version of the extension
-- being registered.
--
-- For registration requests with a @ProgressStatus@ of other than
-- @COMPLETE@, this will be @null@.
--
-- 'progressStatus', 'describeTypeRegistrationResponse_progressStatus' - The current status of the extension registration request.
--
-- 'description', 'describeTypeRegistrationResponse_description' - The description of the extension registration request.
--
-- 'typeArn', 'describeTypeRegistrationResponse_typeArn' - The Amazon Resource Name (ARN) of the extension being registered.
--
-- For registration requests with a @ProgressStatus@ of other than
-- @COMPLETE@, this will be @null@.
--
-- 'httpStatus', 'describeTypeRegistrationResponse_httpStatus' - The response's http status code.
newDescribeTypeRegistrationResponse ::
  -- | 'httpStatus'
  Core.Int ->
  DescribeTypeRegistrationResponse
newDescribeTypeRegistrationResponse pHttpStatus_ =
  DescribeTypeRegistrationResponse'
    { typeVersionArn =
        Core.Nothing,
      progressStatus = Core.Nothing,
      description = Core.Nothing,
      typeArn = Core.Nothing,
      httpStatus = pHttpStatus_
    }

-- | The Amazon Resource Name (ARN) of this specific version of the extension
-- being registered.
--
-- For registration requests with a @ProgressStatus@ of other than
-- @COMPLETE@, this will be @null@.
describeTypeRegistrationResponse_typeVersionArn :: Lens.Lens' DescribeTypeRegistrationResponse (Core.Maybe Core.Text)
describeTypeRegistrationResponse_typeVersionArn = Lens.lens (\DescribeTypeRegistrationResponse' {typeVersionArn} -> typeVersionArn) (\s@DescribeTypeRegistrationResponse' {} a -> s {typeVersionArn = a} :: DescribeTypeRegistrationResponse)

-- | The current status of the extension registration request.
describeTypeRegistrationResponse_progressStatus :: Lens.Lens' DescribeTypeRegistrationResponse (Core.Maybe RegistrationStatus)
describeTypeRegistrationResponse_progressStatus = Lens.lens (\DescribeTypeRegistrationResponse' {progressStatus} -> progressStatus) (\s@DescribeTypeRegistrationResponse' {} a -> s {progressStatus = a} :: DescribeTypeRegistrationResponse)

-- | The description of the extension registration request.
describeTypeRegistrationResponse_description :: Lens.Lens' DescribeTypeRegistrationResponse (Core.Maybe Core.Text)
describeTypeRegistrationResponse_description = Lens.lens (\DescribeTypeRegistrationResponse' {description} -> description) (\s@DescribeTypeRegistrationResponse' {} a -> s {description = a} :: DescribeTypeRegistrationResponse)

-- | The Amazon Resource Name (ARN) of the extension being registered.
--
-- For registration requests with a @ProgressStatus@ of other than
-- @COMPLETE@, this will be @null@.
describeTypeRegistrationResponse_typeArn :: Lens.Lens' DescribeTypeRegistrationResponse (Core.Maybe Core.Text)
describeTypeRegistrationResponse_typeArn = Lens.lens (\DescribeTypeRegistrationResponse' {typeArn} -> typeArn) (\s@DescribeTypeRegistrationResponse' {} a -> s {typeArn = a} :: DescribeTypeRegistrationResponse)

-- | The response's http status code.
describeTypeRegistrationResponse_httpStatus :: Lens.Lens' DescribeTypeRegistrationResponse Core.Int
describeTypeRegistrationResponse_httpStatus = Lens.lens (\DescribeTypeRegistrationResponse' {httpStatus} -> httpStatus) (\s@DescribeTypeRegistrationResponse' {} a -> s {httpStatus = a} :: DescribeTypeRegistrationResponse)

instance Core.NFData DescribeTypeRegistrationResponse
