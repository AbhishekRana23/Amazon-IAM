{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE StrictData #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.Athena.ListEngineVersions
-- Copyright   : (c) 2013-2021 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Returns a list of engine versions that are available to choose from,
-- including the Auto option.
module Network.AWS.Athena.ListEngineVersions
  ( -- * Creating a Request
    ListEngineVersions (..),
    newListEngineVersions,

    -- * Request Lenses
    listEngineVersions_nextToken,
    listEngineVersions_maxResults,

    -- * Destructuring the Response
    ListEngineVersionsResponse (..),
    newListEngineVersionsResponse,

    -- * Response Lenses
    listEngineVersionsResponse_nextToken,
    listEngineVersionsResponse_engineVersions,
    listEngineVersionsResponse_httpStatus,
  )
where

import Network.AWS.Athena.Types
import qualified Network.AWS.Core as Core
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Request as Request
import qualified Network.AWS.Response as Response

-- | /See:/ 'newListEngineVersions' smart constructor.
data ListEngineVersions = ListEngineVersions'
  { -- | A token generated by the Athena service that specifies where to continue
    -- pagination if a previous request was truncated. To obtain the next set
    -- of pages, pass in the @NextToken@ from the response object of the
    -- previous page call.
    nextToken :: Core.Maybe Core.Text,
    -- | The maximum number of engine versions to return in this request.
    maxResults :: Core.Maybe Core.Natural
  }
  deriving (Core.Eq, Core.Read, Core.Show, Core.Generic)

-- |
-- Create a value of 'ListEngineVersions' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'nextToken', 'listEngineVersions_nextToken' - A token generated by the Athena service that specifies where to continue
-- pagination if a previous request was truncated. To obtain the next set
-- of pages, pass in the @NextToken@ from the response object of the
-- previous page call.
--
-- 'maxResults', 'listEngineVersions_maxResults' - The maximum number of engine versions to return in this request.
newListEngineVersions ::
  ListEngineVersions
newListEngineVersions =
  ListEngineVersions'
    { nextToken = Core.Nothing,
      maxResults = Core.Nothing
    }

-- | A token generated by the Athena service that specifies where to continue
-- pagination if a previous request was truncated. To obtain the next set
-- of pages, pass in the @NextToken@ from the response object of the
-- previous page call.
listEngineVersions_nextToken :: Lens.Lens' ListEngineVersions (Core.Maybe Core.Text)
listEngineVersions_nextToken = Lens.lens (\ListEngineVersions' {nextToken} -> nextToken) (\s@ListEngineVersions' {} a -> s {nextToken = a} :: ListEngineVersions)

-- | The maximum number of engine versions to return in this request.
listEngineVersions_maxResults :: Lens.Lens' ListEngineVersions (Core.Maybe Core.Natural)
listEngineVersions_maxResults = Lens.lens (\ListEngineVersions' {maxResults} -> maxResults) (\s@ListEngineVersions' {} a -> s {maxResults = a} :: ListEngineVersions)

instance Core.AWSRequest ListEngineVersions where
  type
    AWSResponse ListEngineVersions =
      ListEngineVersionsResponse
  request = Request.postJSON defaultService
  response =
    Response.receiveJSON
      ( \s h x ->
          ListEngineVersionsResponse'
            Core.<$> (x Core..?> "NextToken")
            Core.<*> (x Core..?> "EngineVersions" Core..!@ Core.mempty)
            Core.<*> (Core.pure (Core.fromEnum s))
      )

instance Core.Hashable ListEngineVersions

instance Core.NFData ListEngineVersions

instance Core.ToHeaders ListEngineVersions where
  toHeaders =
    Core.const
      ( Core.mconcat
          [ "X-Amz-Target"
              Core.=# ( "AmazonAthena.ListEngineVersions" ::
                          Core.ByteString
                      ),
            "Content-Type"
              Core.=# ("application/x-amz-json-1.1" :: Core.ByteString)
          ]
      )

instance Core.ToJSON ListEngineVersions where
  toJSON ListEngineVersions' {..} =
    Core.object
      ( Core.catMaybes
          [ ("NextToken" Core..=) Core.<$> nextToken,
            ("MaxResults" Core..=) Core.<$> maxResults
          ]
      )

instance Core.ToPath ListEngineVersions where
  toPath = Core.const "/"

instance Core.ToQuery ListEngineVersions where
  toQuery = Core.const Core.mempty

-- | /See:/ 'newListEngineVersionsResponse' smart constructor.
data ListEngineVersionsResponse = ListEngineVersionsResponse'
  { -- | A token generated by the Athena service that specifies where to continue
    -- pagination if a previous request was truncated. To obtain the next set
    -- of pages, pass in the @NextToken@ from the response object of the
    -- previous page call.
    nextToken :: Core.Maybe Core.Text,
    -- | A list of engine versions that are available to choose from.
    engineVersions :: Core.Maybe [EngineVersion],
    -- | The response's http status code.
    httpStatus :: Core.Int
  }
  deriving (Core.Eq, Core.Read, Core.Show, Core.Generic)

-- |
-- Create a value of 'ListEngineVersionsResponse' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'nextToken', 'listEngineVersionsResponse_nextToken' - A token generated by the Athena service that specifies where to continue
-- pagination if a previous request was truncated. To obtain the next set
-- of pages, pass in the @NextToken@ from the response object of the
-- previous page call.
--
-- 'engineVersions', 'listEngineVersionsResponse_engineVersions' - A list of engine versions that are available to choose from.
--
-- 'httpStatus', 'listEngineVersionsResponse_httpStatus' - The response's http status code.
newListEngineVersionsResponse ::
  -- | 'httpStatus'
  Core.Int ->
  ListEngineVersionsResponse
newListEngineVersionsResponse pHttpStatus_ =
  ListEngineVersionsResponse'
    { nextToken =
        Core.Nothing,
      engineVersions = Core.Nothing,
      httpStatus = pHttpStatus_
    }

-- | A token generated by the Athena service that specifies where to continue
-- pagination if a previous request was truncated. To obtain the next set
-- of pages, pass in the @NextToken@ from the response object of the
-- previous page call.
listEngineVersionsResponse_nextToken :: Lens.Lens' ListEngineVersionsResponse (Core.Maybe Core.Text)
listEngineVersionsResponse_nextToken = Lens.lens (\ListEngineVersionsResponse' {nextToken} -> nextToken) (\s@ListEngineVersionsResponse' {} a -> s {nextToken = a} :: ListEngineVersionsResponse)

-- | A list of engine versions that are available to choose from.
listEngineVersionsResponse_engineVersions :: Lens.Lens' ListEngineVersionsResponse (Core.Maybe [EngineVersion])
listEngineVersionsResponse_engineVersions = Lens.lens (\ListEngineVersionsResponse' {engineVersions} -> engineVersions) (\s@ListEngineVersionsResponse' {} a -> s {engineVersions = a} :: ListEngineVersionsResponse) Core.. Lens.mapping Lens._Coerce

-- | The response's http status code.
listEngineVersionsResponse_httpStatus :: Lens.Lens' ListEngineVersionsResponse Core.Int
listEngineVersionsResponse_httpStatus = Lens.lens (\ListEngineVersionsResponse' {httpStatus} -> httpStatus) (\s@ListEngineVersionsResponse' {} a -> s {httpStatus = a} :: ListEngineVersionsResponse)

instance Core.NFData ListEngineVersionsResponse
