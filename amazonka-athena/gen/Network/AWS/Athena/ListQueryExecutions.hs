{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE StrictData #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.Athena.ListQueryExecutions
-- Copyright   : (c) 2013-2021 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Provides a list of available query execution IDs for the queries in the
-- specified workgroup. If a workgroup is not specified, returns a list of
-- query execution IDs for the primary workgroup. Requires you to have
-- access to the workgroup in which the queries ran.
--
-- For code samples using the AWS SDK for Java, see
-- <http://docs.aws.amazon.com/athena/latest/ug/code-samples.html Examples and Code Samples>
-- in the /Amazon Athena User Guide/.
--
-- This operation returns paginated results.
module Network.AWS.Athena.ListQueryExecutions
  ( -- * Creating a Request
    ListQueryExecutions (..),
    newListQueryExecutions,

    -- * Request Lenses
    listQueryExecutions_nextToken,
    listQueryExecutions_maxResults,
    listQueryExecutions_workGroup,

    -- * Destructuring the Response
    ListQueryExecutionsResponse (..),
    newListQueryExecutionsResponse,

    -- * Response Lenses
    listQueryExecutionsResponse_nextToken,
    listQueryExecutionsResponse_queryExecutionIds,
    listQueryExecutionsResponse_httpStatus,
  )
where

import Network.AWS.Athena.Types
import qualified Network.AWS.Core as Core
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Request as Request
import qualified Network.AWS.Response as Response

-- | /See:/ 'newListQueryExecutions' smart constructor.
data ListQueryExecutions = ListQueryExecutions'
  { -- | A token generated by the Athena service that specifies where to continue
    -- pagination if a previous request was truncated. To obtain the next set
    -- of pages, pass in the @NextToken@ from the response object of the
    -- previous page call.
    nextToken :: Core.Maybe Core.Text,
    -- | The maximum number of query executions to return in this request.
    maxResults :: Core.Maybe Core.Natural,
    -- | The name of the workgroup from which queries are being returned. If a
    -- workgroup is not specified, a list of available query execution IDs for
    -- the queries in the primary workgroup is returned.
    workGroup :: Core.Maybe Core.Text
  }
  deriving (Core.Eq, Core.Read, Core.Show, Core.Generic)

-- |
-- Create a value of 'ListQueryExecutions' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'nextToken', 'listQueryExecutions_nextToken' - A token generated by the Athena service that specifies where to continue
-- pagination if a previous request was truncated. To obtain the next set
-- of pages, pass in the @NextToken@ from the response object of the
-- previous page call.
--
-- 'maxResults', 'listQueryExecutions_maxResults' - The maximum number of query executions to return in this request.
--
-- 'workGroup', 'listQueryExecutions_workGroup' - The name of the workgroup from which queries are being returned. If a
-- workgroup is not specified, a list of available query execution IDs for
-- the queries in the primary workgroup is returned.
newListQueryExecutions ::
  ListQueryExecutions
newListQueryExecutions =
  ListQueryExecutions'
    { nextToken = Core.Nothing,
      maxResults = Core.Nothing,
      workGroup = Core.Nothing
    }

-- | A token generated by the Athena service that specifies where to continue
-- pagination if a previous request was truncated. To obtain the next set
-- of pages, pass in the @NextToken@ from the response object of the
-- previous page call.
listQueryExecutions_nextToken :: Lens.Lens' ListQueryExecutions (Core.Maybe Core.Text)
listQueryExecutions_nextToken = Lens.lens (\ListQueryExecutions' {nextToken} -> nextToken) (\s@ListQueryExecutions' {} a -> s {nextToken = a} :: ListQueryExecutions)

-- | The maximum number of query executions to return in this request.
listQueryExecutions_maxResults :: Lens.Lens' ListQueryExecutions (Core.Maybe Core.Natural)
listQueryExecutions_maxResults = Lens.lens (\ListQueryExecutions' {maxResults} -> maxResults) (\s@ListQueryExecutions' {} a -> s {maxResults = a} :: ListQueryExecutions)

-- | The name of the workgroup from which queries are being returned. If a
-- workgroup is not specified, a list of available query execution IDs for
-- the queries in the primary workgroup is returned.
listQueryExecutions_workGroup :: Lens.Lens' ListQueryExecutions (Core.Maybe Core.Text)
listQueryExecutions_workGroup = Lens.lens (\ListQueryExecutions' {workGroup} -> workGroup) (\s@ListQueryExecutions' {} a -> s {workGroup = a} :: ListQueryExecutions)

instance Core.AWSPager ListQueryExecutions where
  page rq rs
    | Core.stop
        ( rs
            Lens.^? listQueryExecutionsResponse_nextToken
              Core.. Lens._Just
        ) =
      Core.Nothing
    | Core.stop
        ( rs
            Lens.^? listQueryExecutionsResponse_queryExecutionIds
              Core.. Lens._Just
              Core.. Lens.to Core.toList
        ) =
      Core.Nothing
    | Core.otherwise =
      Core.Just Core.$
        rq
          Lens.& listQueryExecutions_nextToken
          Lens..~ rs
          Lens.^? listQueryExecutionsResponse_nextToken
            Core.. Lens._Just

instance Core.AWSRequest ListQueryExecutions where
  type
    AWSResponse ListQueryExecutions =
      ListQueryExecutionsResponse
  request = Request.postJSON defaultService
  response =
    Response.receiveJSON
      ( \s h x ->
          ListQueryExecutionsResponse'
            Core.<$> (x Core..?> "NextToken")
            Core.<*> (x Core..?> "QueryExecutionIds")
            Core.<*> (Core.pure (Core.fromEnum s))
      )

instance Core.Hashable ListQueryExecutions

instance Core.NFData ListQueryExecutions

instance Core.ToHeaders ListQueryExecutions where
  toHeaders =
    Core.const
      ( Core.mconcat
          [ "X-Amz-Target"
              Core.=# ( "AmazonAthena.ListQueryExecutions" ::
                          Core.ByteString
                      ),
            "Content-Type"
              Core.=# ("application/x-amz-json-1.1" :: Core.ByteString)
          ]
      )

instance Core.ToJSON ListQueryExecutions where
  toJSON ListQueryExecutions' {..} =
    Core.object
      ( Core.catMaybes
          [ ("NextToken" Core..=) Core.<$> nextToken,
            ("MaxResults" Core..=) Core.<$> maxResults,
            ("WorkGroup" Core..=) Core.<$> workGroup
          ]
      )

instance Core.ToPath ListQueryExecutions where
  toPath = Core.const "/"

instance Core.ToQuery ListQueryExecutions where
  toQuery = Core.const Core.mempty

-- | /See:/ 'newListQueryExecutionsResponse' smart constructor.
data ListQueryExecutionsResponse = ListQueryExecutionsResponse'
  { -- | A token to be used by the next request if this request is truncated.
    nextToken :: Core.Maybe Core.Text,
    -- | The unique IDs of each query execution as an array of strings.
    queryExecutionIds :: Core.Maybe (Core.NonEmpty Core.Text),
    -- | The response's http status code.
    httpStatus :: Core.Int
  }
  deriving (Core.Eq, Core.Read, Core.Show, Core.Generic)

-- |
-- Create a value of 'ListQueryExecutionsResponse' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'nextToken', 'listQueryExecutionsResponse_nextToken' - A token to be used by the next request if this request is truncated.
--
-- 'queryExecutionIds', 'listQueryExecutionsResponse_queryExecutionIds' - The unique IDs of each query execution as an array of strings.
--
-- 'httpStatus', 'listQueryExecutionsResponse_httpStatus' - The response's http status code.
newListQueryExecutionsResponse ::
  -- | 'httpStatus'
  Core.Int ->
  ListQueryExecutionsResponse
newListQueryExecutionsResponse pHttpStatus_ =
  ListQueryExecutionsResponse'
    { nextToken =
        Core.Nothing,
      queryExecutionIds = Core.Nothing,
      httpStatus = pHttpStatus_
    }

-- | A token to be used by the next request if this request is truncated.
listQueryExecutionsResponse_nextToken :: Lens.Lens' ListQueryExecutionsResponse (Core.Maybe Core.Text)
listQueryExecutionsResponse_nextToken = Lens.lens (\ListQueryExecutionsResponse' {nextToken} -> nextToken) (\s@ListQueryExecutionsResponse' {} a -> s {nextToken = a} :: ListQueryExecutionsResponse)

-- | The unique IDs of each query execution as an array of strings.
listQueryExecutionsResponse_queryExecutionIds :: Lens.Lens' ListQueryExecutionsResponse (Core.Maybe (Core.NonEmpty Core.Text))
listQueryExecutionsResponse_queryExecutionIds = Lens.lens (\ListQueryExecutionsResponse' {queryExecutionIds} -> queryExecutionIds) (\s@ListQueryExecutionsResponse' {} a -> s {queryExecutionIds = a} :: ListQueryExecutionsResponse) Core.. Lens.mapping Lens._Coerce

-- | The response's http status code.
listQueryExecutionsResponse_httpStatus :: Lens.Lens' ListQueryExecutionsResponse Core.Int
listQueryExecutionsResponse_httpStatus = Lens.lens (\ListQueryExecutionsResponse' {httpStatus} -> httpStatus) (\s@ListQueryExecutionsResponse' {} a -> s {httpStatus = a} :: ListQueryExecutionsResponse)

instance Core.NFData ListQueryExecutionsResponse
