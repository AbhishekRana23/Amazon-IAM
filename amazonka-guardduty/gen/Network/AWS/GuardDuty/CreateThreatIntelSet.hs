{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE StrictData #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.GuardDuty.CreateThreatIntelSet
-- Copyright   : (c) 2013-2021 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Creates a new ThreatIntelSet. ThreatIntelSets consist of known malicious
-- IP addresses. GuardDuty generates findings based on ThreatIntelSets.
-- Only users of the administrator account can use this operation.
module Network.AWS.GuardDuty.CreateThreatIntelSet
  ( -- * Creating a Request
    CreateThreatIntelSet (..),
    newCreateThreatIntelSet,

    -- * Request Lenses
    createThreatIntelSet_tags,
    createThreatIntelSet_clientToken,
    createThreatIntelSet_detectorId,
    createThreatIntelSet_name,
    createThreatIntelSet_format,
    createThreatIntelSet_location,
    createThreatIntelSet_activate,

    -- * Destructuring the Response
    CreateThreatIntelSetResponse (..),
    newCreateThreatIntelSetResponse,

    -- * Response Lenses
    createThreatIntelSetResponse_httpStatus,
    createThreatIntelSetResponse_threatIntelSetId,
  )
where

import qualified Network.AWS.Core as Core
import Network.AWS.GuardDuty.Types
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Request as Request
import qualified Network.AWS.Response as Response

-- | /See:/ 'newCreateThreatIntelSet' smart constructor.
data CreateThreatIntelSet = CreateThreatIntelSet'
  { -- | The tags to be added to a new threat list resource.
    tags :: Core.Maybe (Core.HashMap Core.Text Core.Text),
    -- | The idempotency token for the create request.
    clientToken :: Core.Maybe Core.Text,
    -- | The unique ID of the detector of the GuardDuty account that you want to
    -- create a threatIntelSet for.
    detectorId :: Core.Text,
    -- | A user-friendly ThreatIntelSet name displayed in all findings that are
    -- generated by activity that involves IP addresses included in this
    -- ThreatIntelSet.
    name :: Core.Text,
    -- | The format of the file that contains the ThreatIntelSet.
    format :: ThreatIntelSetFormat,
    -- | The URI of the file that contains the ThreatIntelSet. For example:
    -- https:\/\/s3.us-west-2.amazonaws.com\/my-bucket\/my-object-key.
    location :: Core.Text,
    -- | A Boolean value that indicates whether GuardDuty is to start using the
    -- uploaded ThreatIntelSet.
    activate :: Core.Bool
  }
  deriving (Core.Eq, Core.Read, Core.Show, Core.Generic)

-- |
-- Create a value of 'CreateThreatIntelSet' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'tags', 'createThreatIntelSet_tags' - The tags to be added to a new threat list resource.
--
-- 'clientToken', 'createThreatIntelSet_clientToken' - The idempotency token for the create request.
--
-- 'detectorId', 'createThreatIntelSet_detectorId' - The unique ID of the detector of the GuardDuty account that you want to
-- create a threatIntelSet for.
--
-- 'name', 'createThreatIntelSet_name' - A user-friendly ThreatIntelSet name displayed in all findings that are
-- generated by activity that involves IP addresses included in this
-- ThreatIntelSet.
--
-- 'format', 'createThreatIntelSet_format' - The format of the file that contains the ThreatIntelSet.
--
-- 'location', 'createThreatIntelSet_location' - The URI of the file that contains the ThreatIntelSet. For example:
-- https:\/\/s3.us-west-2.amazonaws.com\/my-bucket\/my-object-key.
--
-- 'activate', 'createThreatIntelSet_activate' - A Boolean value that indicates whether GuardDuty is to start using the
-- uploaded ThreatIntelSet.
newCreateThreatIntelSet ::
  -- | 'detectorId'
  Core.Text ->
  -- | 'name'
  Core.Text ->
  -- | 'format'
  ThreatIntelSetFormat ->
  -- | 'location'
  Core.Text ->
  -- | 'activate'
  Core.Bool ->
  CreateThreatIntelSet
newCreateThreatIntelSet
  pDetectorId_
  pName_
  pFormat_
  pLocation_
  pActivate_ =
    CreateThreatIntelSet'
      { tags = Core.Nothing,
        clientToken = Core.Nothing,
        detectorId = pDetectorId_,
        name = pName_,
        format = pFormat_,
        location = pLocation_,
        activate = pActivate_
      }

-- | The tags to be added to a new threat list resource.
createThreatIntelSet_tags :: Lens.Lens' CreateThreatIntelSet (Core.Maybe (Core.HashMap Core.Text Core.Text))
createThreatIntelSet_tags = Lens.lens (\CreateThreatIntelSet' {tags} -> tags) (\s@CreateThreatIntelSet' {} a -> s {tags = a} :: CreateThreatIntelSet) Core.. Lens.mapping Lens._Coerce

-- | The idempotency token for the create request.
createThreatIntelSet_clientToken :: Lens.Lens' CreateThreatIntelSet (Core.Maybe Core.Text)
createThreatIntelSet_clientToken = Lens.lens (\CreateThreatIntelSet' {clientToken} -> clientToken) (\s@CreateThreatIntelSet' {} a -> s {clientToken = a} :: CreateThreatIntelSet)

-- | The unique ID of the detector of the GuardDuty account that you want to
-- create a threatIntelSet for.
createThreatIntelSet_detectorId :: Lens.Lens' CreateThreatIntelSet Core.Text
createThreatIntelSet_detectorId = Lens.lens (\CreateThreatIntelSet' {detectorId} -> detectorId) (\s@CreateThreatIntelSet' {} a -> s {detectorId = a} :: CreateThreatIntelSet)

-- | A user-friendly ThreatIntelSet name displayed in all findings that are
-- generated by activity that involves IP addresses included in this
-- ThreatIntelSet.
createThreatIntelSet_name :: Lens.Lens' CreateThreatIntelSet Core.Text
createThreatIntelSet_name = Lens.lens (\CreateThreatIntelSet' {name} -> name) (\s@CreateThreatIntelSet' {} a -> s {name = a} :: CreateThreatIntelSet)

-- | The format of the file that contains the ThreatIntelSet.
createThreatIntelSet_format :: Lens.Lens' CreateThreatIntelSet ThreatIntelSetFormat
createThreatIntelSet_format = Lens.lens (\CreateThreatIntelSet' {format} -> format) (\s@CreateThreatIntelSet' {} a -> s {format = a} :: CreateThreatIntelSet)

-- | The URI of the file that contains the ThreatIntelSet. For example:
-- https:\/\/s3.us-west-2.amazonaws.com\/my-bucket\/my-object-key.
createThreatIntelSet_location :: Lens.Lens' CreateThreatIntelSet Core.Text
createThreatIntelSet_location = Lens.lens (\CreateThreatIntelSet' {location} -> location) (\s@CreateThreatIntelSet' {} a -> s {location = a} :: CreateThreatIntelSet)

-- | A Boolean value that indicates whether GuardDuty is to start using the
-- uploaded ThreatIntelSet.
createThreatIntelSet_activate :: Lens.Lens' CreateThreatIntelSet Core.Bool
createThreatIntelSet_activate = Lens.lens (\CreateThreatIntelSet' {activate} -> activate) (\s@CreateThreatIntelSet' {} a -> s {activate = a} :: CreateThreatIntelSet)

instance Core.AWSRequest CreateThreatIntelSet where
  type
    AWSResponse CreateThreatIntelSet =
      CreateThreatIntelSetResponse
  request = Request.postJSON defaultService
  response =
    Response.receiveJSON
      ( \s h x ->
          CreateThreatIntelSetResponse'
            Core.<$> (Core.pure (Core.fromEnum s))
            Core.<*> (x Core..:> "threatIntelSetId")
      )

instance Core.Hashable CreateThreatIntelSet

instance Core.NFData CreateThreatIntelSet

instance Core.ToHeaders CreateThreatIntelSet where
  toHeaders =
    Core.const
      ( Core.mconcat
          [ "Content-Type"
              Core.=# ("application/x-amz-json-1.1" :: Core.ByteString)
          ]
      )

instance Core.ToJSON CreateThreatIntelSet where
  toJSON CreateThreatIntelSet' {..} =
    Core.object
      ( Core.catMaybes
          [ ("tags" Core..=) Core.<$> tags,
            ("clientToken" Core..=) Core.<$> clientToken,
            Core.Just ("name" Core..= name),
            Core.Just ("format" Core..= format),
            Core.Just ("location" Core..= location),
            Core.Just ("activate" Core..= activate)
          ]
      )

instance Core.ToPath CreateThreatIntelSet where
  toPath CreateThreatIntelSet' {..} =
    Core.mconcat
      [ "/detector/",
        Core.toBS detectorId,
        "/threatintelset"
      ]

instance Core.ToQuery CreateThreatIntelSet where
  toQuery = Core.const Core.mempty

-- | /See:/ 'newCreateThreatIntelSetResponse' smart constructor.
data CreateThreatIntelSetResponse = CreateThreatIntelSetResponse'
  { -- | The response's http status code.
    httpStatus :: Core.Int,
    -- | The ID of the ThreatIntelSet resource.
    threatIntelSetId :: Core.Text
  }
  deriving (Core.Eq, Core.Read, Core.Show, Core.Generic)

-- |
-- Create a value of 'CreateThreatIntelSetResponse' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'httpStatus', 'createThreatIntelSetResponse_httpStatus' - The response's http status code.
--
-- 'threatIntelSetId', 'createThreatIntelSetResponse_threatIntelSetId' - The ID of the ThreatIntelSet resource.
newCreateThreatIntelSetResponse ::
  -- | 'httpStatus'
  Core.Int ->
  -- | 'threatIntelSetId'
  Core.Text ->
  CreateThreatIntelSetResponse
newCreateThreatIntelSetResponse
  pHttpStatus_
  pThreatIntelSetId_ =
    CreateThreatIntelSetResponse'
      { httpStatus =
          pHttpStatus_,
        threatIntelSetId = pThreatIntelSetId_
      }

-- | The response's http status code.
createThreatIntelSetResponse_httpStatus :: Lens.Lens' CreateThreatIntelSetResponse Core.Int
createThreatIntelSetResponse_httpStatus = Lens.lens (\CreateThreatIntelSetResponse' {httpStatus} -> httpStatus) (\s@CreateThreatIntelSetResponse' {} a -> s {httpStatus = a} :: CreateThreatIntelSetResponse)

-- | The ID of the ThreatIntelSet resource.
createThreatIntelSetResponse_threatIntelSetId :: Lens.Lens' CreateThreatIntelSetResponse Core.Text
createThreatIntelSetResponse_threatIntelSetId = Lens.lens (\CreateThreatIntelSetResponse' {threatIntelSetId} -> threatIntelSetId) (\s@CreateThreatIntelSetResponse' {} a -> s {threatIntelSetId = a} :: CreateThreatIntelSetResponse)

instance Core.NFData CreateThreatIntelSetResponse
