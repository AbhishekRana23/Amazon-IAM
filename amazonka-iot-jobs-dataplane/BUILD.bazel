load("@rules_haskell//haskell:defs.bzl", "haskell_library", "haskell_test")

# rule generated from amazonka-iot-jobs-dataplane/amazonka-iot-jobs-dataplane.cabal by gazelle_cabal
haskell_library(
    name = "amazonka-iot-jobs-dataplane",
    srcs = [
        "gen/Network/AWS/IoTJobsData.hs",
        "gen/Network/AWS/IoTJobsData/DescribeJobExecution.hs",
        "gen/Network/AWS/IoTJobsData/GetPendingJobExecutions.hs",
        "gen/Network/AWS/IoTJobsData/Lens.hs",
        "gen/Network/AWS/IoTJobsData/StartNextPendingJobExecution.hs",
        "gen/Network/AWS/IoTJobsData/Types.hs",
        "gen/Network/AWS/IoTJobsData/Types/JobExecution.hs",
        "gen/Network/AWS/IoTJobsData/Types/JobExecutionState.hs",
        "gen/Network/AWS/IoTJobsData/Types/JobExecutionStatus.hs",
        "gen/Network/AWS/IoTJobsData/Types/JobExecutionSummary.hs",
        "gen/Network/AWS/IoTJobsData/UpdateJobExecution.hs",
        "gen/Network/AWS/IoTJobsData/Waiters.hs",
    ],
    compiler_flags = [
        "-DVERSION_amazonka_iot_jobs_dataplane=\"1.6.1\"",
        "-Wall",
        "-fwarn-incomplete-uni-patterns",
        "-fwarn-incomplete-record-updates",
        "-funbox-strict-fields",
    ],
    hidden_modules = [],
    version = "1.6.1",
    visibility = ["//visibility:public"],
    deps = [
        "//amazonka",
        "@stackage//:base",
    ],
)

# rule generated from amazonka-iot-jobs-dataplane/amazonka-iot-jobs-dataplane.cabal by gazelle_cabal
haskell_test(
    name = "amazonka-iot-jobs-dataplane-test",
    srcs = [
        "test/Main.hs",
        "test/Test/AWS/Gen/IoTJobsData.hs",
        "test/Test/AWS/IoTJobsData.hs",
        "test/Test/AWS/IoTJobsData/Internal.hs",
    ],
    compiler_flags = [
        "-DVERSION_amazonka_iot_jobs_dataplane=\"1.6.1\"",
        "-Wall",
        "-threaded",
    ],
    version = "1.6.1",
    visibility = ["//visibility:public"],
    deps = [
        ":amazonka-iot-jobs-dataplane",
        "//amazonka",
        "//test:amazonka-test",
        "@stackage//:base",
        "@stackage//:bytestring",
        "@stackage//:case-insensitive",
        "@stackage//:tasty",
        "@stackage//:tasty-hunit",
        "@stackage//:text",
        "@stackage//:time",
        "@stackage//:unordered-containers",
    ],
)
