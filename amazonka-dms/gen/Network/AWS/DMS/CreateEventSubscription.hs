{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE StrictData #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.DMS.CreateEventSubscription
-- Copyright   : (c) 2013-2021 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Creates an AWS DMS event notification subscription.
--
-- You can specify the type of source (@SourceType@) you want to be
-- notified of, provide a list of AWS DMS source IDs (@SourceIds@) that
-- triggers the events, and provide a list of event categories
-- (@EventCategories@) for events you want to be notified of. If you
-- specify both the @SourceType@ and @SourceIds@, such as
-- @SourceType = replication-instance@ and
-- @SourceIdentifier = my-replinstance@, you will be notified of all the
-- replication instance events for the specified source. If you specify a
-- @SourceType@ but don\'t specify a @SourceIdentifier@, you receive notice
-- of the events for that source type for all your AWS DMS sources. If you
-- don\'t specify either @SourceType@ nor @SourceIdentifier@, you will be
-- notified of events generated from all AWS DMS sources belonging to your
-- customer account.
--
-- For more information about AWS DMS events, see
-- <https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Events.html Working with Events and Notifications>
-- in the /AWS Database Migration Service User Guide./
module Network.AWS.DMS.CreateEventSubscription
  ( -- * Creating a Request
    CreateEventSubscription (..),
    newCreateEventSubscription,

    -- * Request Lenses
    createEventSubscription_sourceIds,
    createEventSubscription_enabled,
    createEventSubscription_eventCategories,
    createEventSubscription_tags,
    createEventSubscription_sourceType,
    createEventSubscription_subscriptionName,
    createEventSubscription_snsTopicArn,

    -- * Destructuring the Response
    CreateEventSubscriptionResponse (..),
    newCreateEventSubscriptionResponse,

    -- * Response Lenses
    createEventSubscriptionResponse_eventSubscription,
    createEventSubscriptionResponse_httpStatus,
  )
where

import qualified Network.AWS.Core as Core
import Network.AWS.DMS.Types
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Request as Request
import qualified Network.AWS.Response as Response

-- |
--
-- /See:/ 'newCreateEventSubscription' smart constructor.
data CreateEventSubscription = CreateEventSubscription'
  { -- | A list of identifiers for which AWS DMS provides notification events.
    --
    -- If you don\'t specify a value, notifications are provided for all
    -- sources.
    --
    -- If you specify multiple values, they must be of the same type. For
    -- example, if you specify a database instance ID, then all of the other
    -- values must be database instance IDs.
    sourceIds :: Core.Maybe [Core.Text],
    -- | A Boolean value; set to @true@ to activate the subscription, or set to
    -- @false@ to create the subscription but not activate it.
    enabled :: Core.Maybe Core.Bool,
    -- | A list of event categories for a source type that you want to subscribe
    -- to. For more information, see
    -- <https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Events.html Working with Events and Notifications>
    -- in the /AWS Database Migration Service User Guide./
    eventCategories :: Core.Maybe [Core.Text],
    -- | One or more tags to be assigned to the event subscription.
    tags :: Core.Maybe [Tag],
    -- | The type of AWS DMS resource that generates the events. For example, if
    -- you want to be notified of events generated by a replication instance,
    -- you set this parameter to @replication-instance@. If this value isn\'t
    -- specified, all events are returned.
    --
    -- Valid values: @replication-instance@ | @replication-task@
    sourceType :: Core.Maybe Core.Text,
    -- | The name of the AWS DMS event notification subscription. This name must
    -- be less than 255 characters.
    subscriptionName :: Core.Text,
    -- | The Amazon Resource Name (ARN) of the Amazon SNS topic created for event
    -- notification. The ARN is created by Amazon SNS when you create a topic
    -- and subscribe to it.
    snsTopicArn :: Core.Text
  }
  deriving (Core.Eq, Core.Read, Core.Show, Core.Generic)

-- |
-- Create a value of 'CreateEventSubscription' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'sourceIds', 'createEventSubscription_sourceIds' - A list of identifiers for which AWS DMS provides notification events.
--
-- If you don\'t specify a value, notifications are provided for all
-- sources.
--
-- If you specify multiple values, they must be of the same type. For
-- example, if you specify a database instance ID, then all of the other
-- values must be database instance IDs.
--
-- 'enabled', 'createEventSubscription_enabled' - A Boolean value; set to @true@ to activate the subscription, or set to
-- @false@ to create the subscription but not activate it.
--
-- 'eventCategories', 'createEventSubscription_eventCategories' - A list of event categories for a source type that you want to subscribe
-- to. For more information, see
-- <https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Events.html Working with Events and Notifications>
-- in the /AWS Database Migration Service User Guide./
--
-- 'tags', 'createEventSubscription_tags' - One or more tags to be assigned to the event subscription.
--
-- 'sourceType', 'createEventSubscription_sourceType' - The type of AWS DMS resource that generates the events. For example, if
-- you want to be notified of events generated by a replication instance,
-- you set this parameter to @replication-instance@. If this value isn\'t
-- specified, all events are returned.
--
-- Valid values: @replication-instance@ | @replication-task@
--
-- 'subscriptionName', 'createEventSubscription_subscriptionName' - The name of the AWS DMS event notification subscription. This name must
-- be less than 255 characters.
--
-- 'snsTopicArn', 'createEventSubscription_snsTopicArn' - The Amazon Resource Name (ARN) of the Amazon SNS topic created for event
-- notification. The ARN is created by Amazon SNS when you create a topic
-- and subscribe to it.
newCreateEventSubscription ::
  -- | 'subscriptionName'
  Core.Text ->
  -- | 'snsTopicArn'
  Core.Text ->
  CreateEventSubscription
newCreateEventSubscription
  pSubscriptionName_
  pSnsTopicArn_ =
    CreateEventSubscription'
      { sourceIds = Core.Nothing,
        enabled = Core.Nothing,
        eventCategories = Core.Nothing,
        tags = Core.Nothing,
        sourceType = Core.Nothing,
        subscriptionName = pSubscriptionName_,
        snsTopicArn = pSnsTopicArn_
      }

-- | A list of identifiers for which AWS DMS provides notification events.
--
-- If you don\'t specify a value, notifications are provided for all
-- sources.
--
-- If you specify multiple values, they must be of the same type. For
-- example, if you specify a database instance ID, then all of the other
-- values must be database instance IDs.
createEventSubscription_sourceIds :: Lens.Lens' CreateEventSubscription (Core.Maybe [Core.Text])
createEventSubscription_sourceIds = Lens.lens (\CreateEventSubscription' {sourceIds} -> sourceIds) (\s@CreateEventSubscription' {} a -> s {sourceIds = a} :: CreateEventSubscription) Core.. Lens.mapping Lens._Coerce

-- | A Boolean value; set to @true@ to activate the subscription, or set to
-- @false@ to create the subscription but not activate it.
createEventSubscription_enabled :: Lens.Lens' CreateEventSubscription (Core.Maybe Core.Bool)
createEventSubscription_enabled = Lens.lens (\CreateEventSubscription' {enabled} -> enabled) (\s@CreateEventSubscription' {} a -> s {enabled = a} :: CreateEventSubscription)

-- | A list of event categories for a source type that you want to subscribe
-- to. For more information, see
-- <https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Events.html Working with Events and Notifications>
-- in the /AWS Database Migration Service User Guide./
createEventSubscription_eventCategories :: Lens.Lens' CreateEventSubscription (Core.Maybe [Core.Text])
createEventSubscription_eventCategories = Lens.lens (\CreateEventSubscription' {eventCategories} -> eventCategories) (\s@CreateEventSubscription' {} a -> s {eventCategories = a} :: CreateEventSubscription) Core.. Lens.mapping Lens._Coerce

-- | One or more tags to be assigned to the event subscription.
createEventSubscription_tags :: Lens.Lens' CreateEventSubscription (Core.Maybe [Tag])
createEventSubscription_tags = Lens.lens (\CreateEventSubscription' {tags} -> tags) (\s@CreateEventSubscription' {} a -> s {tags = a} :: CreateEventSubscription) Core.. Lens.mapping Lens._Coerce

-- | The type of AWS DMS resource that generates the events. For example, if
-- you want to be notified of events generated by a replication instance,
-- you set this parameter to @replication-instance@. If this value isn\'t
-- specified, all events are returned.
--
-- Valid values: @replication-instance@ | @replication-task@
createEventSubscription_sourceType :: Lens.Lens' CreateEventSubscription (Core.Maybe Core.Text)
createEventSubscription_sourceType = Lens.lens (\CreateEventSubscription' {sourceType} -> sourceType) (\s@CreateEventSubscription' {} a -> s {sourceType = a} :: CreateEventSubscription)

-- | The name of the AWS DMS event notification subscription. This name must
-- be less than 255 characters.
createEventSubscription_subscriptionName :: Lens.Lens' CreateEventSubscription Core.Text
createEventSubscription_subscriptionName = Lens.lens (\CreateEventSubscription' {subscriptionName} -> subscriptionName) (\s@CreateEventSubscription' {} a -> s {subscriptionName = a} :: CreateEventSubscription)

-- | The Amazon Resource Name (ARN) of the Amazon SNS topic created for event
-- notification. The ARN is created by Amazon SNS when you create a topic
-- and subscribe to it.
createEventSubscription_snsTopicArn :: Lens.Lens' CreateEventSubscription Core.Text
createEventSubscription_snsTopicArn = Lens.lens (\CreateEventSubscription' {snsTopicArn} -> snsTopicArn) (\s@CreateEventSubscription' {} a -> s {snsTopicArn = a} :: CreateEventSubscription)

instance Core.AWSRequest CreateEventSubscription where
  type
    AWSResponse CreateEventSubscription =
      CreateEventSubscriptionResponse
  request = Request.postJSON defaultService
  response =
    Response.receiveJSON
      ( \s h x ->
          CreateEventSubscriptionResponse'
            Core.<$> (x Core..?> "EventSubscription")
            Core.<*> (Core.pure (Core.fromEnum s))
      )

instance Core.Hashable CreateEventSubscription

instance Core.NFData CreateEventSubscription

instance Core.ToHeaders CreateEventSubscription where
  toHeaders =
    Core.const
      ( Core.mconcat
          [ "X-Amz-Target"
              Core.=# ( "AmazonDMSv20160101.CreateEventSubscription" ::
                          Core.ByteString
                      ),
            "Content-Type"
              Core.=# ("application/x-amz-json-1.1" :: Core.ByteString)
          ]
      )

instance Core.ToJSON CreateEventSubscription where
  toJSON CreateEventSubscription' {..} =
    Core.object
      ( Core.catMaybes
          [ ("SourceIds" Core..=) Core.<$> sourceIds,
            ("Enabled" Core..=) Core.<$> enabled,
            ("EventCategories" Core..=) Core.<$> eventCategories,
            ("Tags" Core..=) Core.<$> tags,
            ("SourceType" Core..=) Core.<$> sourceType,
            Core.Just
              ("SubscriptionName" Core..= subscriptionName),
            Core.Just ("SnsTopicArn" Core..= snsTopicArn)
          ]
      )

instance Core.ToPath CreateEventSubscription where
  toPath = Core.const "/"

instance Core.ToQuery CreateEventSubscription where
  toQuery = Core.const Core.mempty

-- |
--
-- /See:/ 'newCreateEventSubscriptionResponse' smart constructor.
data CreateEventSubscriptionResponse = CreateEventSubscriptionResponse'
  { -- | The event subscription that was created.
    eventSubscription :: Core.Maybe EventSubscription,
    -- | The response's http status code.
    httpStatus :: Core.Int
  }
  deriving (Core.Eq, Core.Read, Core.Show, Core.Generic)

-- |
-- Create a value of 'CreateEventSubscriptionResponse' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'eventSubscription', 'createEventSubscriptionResponse_eventSubscription' - The event subscription that was created.
--
-- 'httpStatus', 'createEventSubscriptionResponse_httpStatus' - The response's http status code.
newCreateEventSubscriptionResponse ::
  -- | 'httpStatus'
  Core.Int ->
  CreateEventSubscriptionResponse
newCreateEventSubscriptionResponse pHttpStatus_ =
  CreateEventSubscriptionResponse'
    { eventSubscription =
        Core.Nothing,
      httpStatus = pHttpStatus_
    }

-- | The event subscription that was created.
createEventSubscriptionResponse_eventSubscription :: Lens.Lens' CreateEventSubscriptionResponse (Core.Maybe EventSubscription)
createEventSubscriptionResponse_eventSubscription = Lens.lens (\CreateEventSubscriptionResponse' {eventSubscription} -> eventSubscription) (\s@CreateEventSubscriptionResponse' {} a -> s {eventSubscription = a} :: CreateEventSubscriptionResponse)

-- | The response's http status code.
createEventSubscriptionResponse_httpStatus :: Lens.Lens' CreateEventSubscriptionResponse Core.Int
createEventSubscriptionResponse_httpStatus = Lens.lens (\CreateEventSubscriptionResponse' {httpStatus} -> httpStatus) (\s@CreateEventSubscriptionResponse' {} a -> s {httpStatus = a} :: CreateEventSubscriptionResponse)

instance Core.NFData CreateEventSubscriptionResponse
