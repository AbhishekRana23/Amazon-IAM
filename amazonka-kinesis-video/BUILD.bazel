load("@rules_haskell//haskell:defs.bzl", "haskell_library", "haskell_test")

# rule generated from amazonka-kinesis-video/amazonka-kinesis-video.cabal by gazelle_cabal
haskell_library(
    name = "amazonka-kinesis-video",
    srcs = [
        "gen/Network/AWS/KinesisVideo.hs",
        "gen/Network/AWS/KinesisVideo/CreateSignalingChannel.hs",
        "gen/Network/AWS/KinesisVideo/CreateStream.hs",
        "gen/Network/AWS/KinesisVideo/DeleteSignalingChannel.hs",
        "gen/Network/AWS/KinesisVideo/DeleteStream.hs",
        "gen/Network/AWS/KinesisVideo/DescribeSignalingChannel.hs",
        "gen/Network/AWS/KinesisVideo/DescribeStream.hs",
        "gen/Network/AWS/KinesisVideo/GetDataEndpoint.hs",
        "gen/Network/AWS/KinesisVideo/GetSignalingChannelEndpoint.hs",
        "gen/Network/AWS/KinesisVideo/Lens.hs",
        "gen/Network/AWS/KinesisVideo/ListSignalingChannels.hs",
        "gen/Network/AWS/KinesisVideo/ListStreams.hs",
        "gen/Network/AWS/KinesisVideo/ListTagsForResource.hs",
        "gen/Network/AWS/KinesisVideo/ListTagsForStream.hs",
        "gen/Network/AWS/KinesisVideo/TagResource.hs",
        "gen/Network/AWS/KinesisVideo/TagStream.hs",
        "gen/Network/AWS/KinesisVideo/Types.hs",
        "gen/Network/AWS/KinesisVideo/Types/APIName.hs",
        "gen/Network/AWS/KinesisVideo/Types/ChannelInfo.hs",
        "gen/Network/AWS/KinesisVideo/Types/ChannelNameCondition.hs",
        "gen/Network/AWS/KinesisVideo/Types/ChannelProtocol.hs",
        "gen/Network/AWS/KinesisVideo/Types/ChannelRole.hs",
        "gen/Network/AWS/KinesisVideo/Types/ChannelType.hs",
        "gen/Network/AWS/KinesisVideo/Types/ComparisonOperator.hs",
        "gen/Network/AWS/KinesisVideo/Types/ResourceEndpointListItem.hs",
        "gen/Network/AWS/KinesisVideo/Types/SingleMasterChannelEndpointConfiguration.hs",
        "gen/Network/AWS/KinesisVideo/Types/SingleMasterConfiguration.hs",
        "gen/Network/AWS/KinesisVideo/Types/StreamInfo.hs",
        "gen/Network/AWS/KinesisVideo/Types/StreamNameCondition.hs",
        "gen/Network/AWS/KinesisVideo/Types/StreamStatus.hs",
        "gen/Network/AWS/KinesisVideo/Types/Tag.hs",
        "gen/Network/AWS/KinesisVideo/Types/UpdateDataRetentionOperation.hs",
        "gen/Network/AWS/KinesisVideo/UntagResource.hs",
        "gen/Network/AWS/KinesisVideo/UntagStream.hs",
        "gen/Network/AWS/KinesisVideo/UpdateDataRetention.hs",
        "gen/Network/AWS/KinesisVideo/UpdateSignalingChannel.hs",
        "gen/Network/AWS/KinesisVideo/UpdateStream.hs",
        "gen/Network/AWS/KinesisVideo/Waiters.hs",
    ],
    compiler_flags = [
        "-DVERSION_amazonka_kinesis_video=\"1.6.1\"",
        "-Wall",
        "-fwarn-incomplete-uni-patterns",
        "-fwarn-incomplete-record-updates",
        "-funbox-strict-fields",
    ],
    hidden_modules = [],
    version = "1.6.1",
    visibility = ["//visibility:public"],
    deps = [
        "//amazonka",
        "@stackage//:base",
    ],
)

# rule generated from amazonka-kinesis-video/amazonka-kinesis-video.cabal by gazelle_cabal
haskell_test(
    name = "amazonka-kinesis-video-test",
    srcs = [
        "test/Main.hs",
        "test/Test/AWS/Gen/KinesisVideo.hs",
        "test/Test/AWS/KinesisVideo.hs",
        "test/Test/AWS/KinesisVideo/Internal.hs",
    ],
    compiler_flags = [
        "-DVERSION_amazonka_kinesis_video=\"1.6.1\"",
        "-Wall",
        "-threaded",
    ],
    version = "1.6.1",
    visibility = ["//visibility:public"],
    deps = [
        ":amazonka-kinesis-video",
        "//amazonka",
        "//test:amazonka-test",
        "@stackage//:base",
        "@stackage//:bytestring",
        "@stackage//:case-insensitive",
        "@stackage//:tasty",
        "@stackage//:tasty-hunit",
        "@stackage//:text",
        "@stackage//:time",
        "@stackage//:unordered-containers",
    ],
)
