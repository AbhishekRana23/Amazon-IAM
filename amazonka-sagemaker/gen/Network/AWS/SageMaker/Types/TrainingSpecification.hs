{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE StrictData #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.SageMaker.Types.TrainingSpecification
-- Copyright   : (c) 2013-2021 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
module Network.AWS.SageMaker.Types.TrainingSpecification where

import qualified Network.AWS.Core as Core
import qualified Network.AWS.Lens as Lens
import Network.AWS.SageMaker.Types.ChannelSpecification
import Network.AWS.SageMaker.Types.HyperParameterSpecification
import Network.AWS.SageMaker.Types.HyperParameterTuningJobObjective
import Network.AWS.SageMaker.Types.MetricDefinition
import Network.AWS.SageMaker.Types.TrainingInstanceType

-- | Defines how the algorithm is used for a training job.
--
-- /See:/ 'newTrainingSpecification' smart constructor.
data TrainingSpecification = TrainingSpecification'
  { -- | A list of the @HyperParameterSpecification@ objects, that define the
    -- supported hyperparameters. This is required if the algorithm supports
    -- automatic model tuning.>
    supportedHyperParameters :: Core.Maybe [HyperParameterSpecification],
    -- | A list of @MetricDefinition@ objects, which are used for parsing metrics
    -- generated by the algorithm.
    metricDefinitions :: Core.Maybe [MetricDefinition],
    -- | An MD5 hash of the training algorithm that identifies the Docker image
    -- used for training.
    trainingImageDigest :: Core.Maybe Core.Text,
    -- | Indicates whether the algorithm supports distributed training. If set to
    -- false, buyers can\'t request more than one instance during training.
    supportsDistributedTraining :: Core.Maybe Core.Bool,
    -- | A list of the metrics that the algorithm emits that can be used as the
    -- objective metric in a hyperparameter tuning job.
    supportedTuningJobObjectiveMetrics :: Core.Maybe [HyperParameterTuningJobObjective],
    -- | The Amazon ECR registry path of the Docker image that contains the
    -- training algorithm.
    trainingImage :: Core.Text,
    -- | A list of the instance types that this algorithm can use for training.
    supportedTrainingInstanceTypes :: [TrainingInstanceType],
    -- | A list of @ChannelSpecification@ objects, which specify the input
    -- sources to be used by the algorithm.
    trainingChannels :: Core.NonEmpty ChannelSpecification
  }
  deriving (Core.Eq, Core.Read, Core.Show, Core.Generic)

-- |
-- Create a value of 'TrainingSpecification' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'supportedHyperParameters', 'trainingSpecification_supportedHyperParameters' - A list of the @HyperParameterSpecification@ objects, that define the
-- supported hyperparameters. This is required if the algorithm supports
-- automatic model tuning.>
--
-- 'metricDefinitions', 'trainingSpecification_metricDefinitions' - A list of @MetricDefinition@ objects, which are used for parsing metrics
-- generated by the algorithm.
--
-- 'trainingImageDigest', 'trainingSpecification_trainingImageDigest' - An MD5 hash of the training algorithm that identifies the Docker image
-- used for training.
--
-- 'supportsDistributedTraining', 'trainingSpecification_supportsDistributedTraining' - Indicates whether the algorithm supports distributed training. If set to
-- false, buyers can\'t request more than one instance during training.
--
-- 'supportedTuningJobObjectiveMetrics', 'trainingSpecification_supportedTuningJobObjectiveMetrics' - A list of the metrics that the algorithm emits that can be used as the
-- objective metric in a hyperparameter tuning job.
--
-- 'trainingImage', 'trainingSpecification_trainingImage' - The Amazon ECR registry path of the Docker image that contains the
-- training algorithm.
--
-- 'supportedTrainingInstanceTypes', 'trainingSpecification_supportedTrainingInstanceTypes' - A list of the instance types that this algorithm can use for training.
--
-- 'trainingChannels', 'trainingSpecification_trainingChannels' - A list of @ChannelSpecification@ objects, which specify the input
-- sources to be used by the algorithm.
newTrainingSpecification ::
  -- | 'trainingImage'
  Core.Text ->
  -- | 'trainingChannels'
  Core.NonEmpty ChannelSpecification ->
  TrainingSpecification
newTrainingSpecification
  pTrainingImage_
  pTrainingChannels_ =
    TrainingSpecification'
      { supportedHyperParameters =
          Core.Nothing,
        metricDefinitions = Core.Nothing,
        trainingImageDigest = Core.Nothing,
        supportsDistributedTraining = Core.Nothing,
        supportedTuningJobObjectiveMetrics = Core.Nothing,
        trainingImage = pTrainingImage_,
        supportedTrainingInstanceTypes = Core.mempty,
        trainingChannels =
          Lens._Coerce Lens.# pTrainingChannels_
      }

-- | A list of the @HyperParameterSpecification@ objects, that define the
-- supported hyperparameters. This is required if the algorithm supports
-- automatic model tuning.>
trainingSpecification_supportedHyperParameters :: Lens.Lens' TrainingSpecification (Core.Maybe [HyperParameterSpecification])
trainingSpecification_supportedHyperParameters = Lens.lens (\TrainingSpecification' {supportedHyperParameters} -> supportedHyperParameters) (\s@TrainingSpecification' {} a -> s {supportedHyperParameters = a} :: TrainingSpecification) Core.. Lens.mapping Lens._Coerce

-- | A list of @MetricDefinition@ objects, which are used for parsing metrics
-- generated by the algorithm.
trainingSpecification_metricDefinitions :: Lens.Lens' TrainingSpecification (Core.Maybe [MetricDefinition])
trainingSpecification_metricDefinitions = Lens.lens (\TrainingSpecification' {metricDefinitions} -> metricDefinitions) (\s@TrainingSpecification' {} a -> s {metricDefinitions = a} :: TrainingSpecification) Core.. Lens.mapping Lens._Coerce

-- | An MD5 hash of the training algorithm that identifies the Docker image
-- used for training.
trainingSpecification_trainingImageDigest :: Lens.Lens' TrainingSpecification (Core.Maybe Core.Text)
trainingSpecification_trainingImageDigest = Lens.lens (\TrainingSpecification' {trainingImageDigest} -> trainingImageDigest) (\s@TrainingSpecification' {} a -> s {trainingImageDigest = a} :: TrainingSpecification)

-- | Indicates whether the algorithm supports distributed training. If set to
-- false, buyers can\'t request more than one instance during training.
trainingSpecification_supportsDistributedTraining :: Lens.Lens' TrainingSpecification (Core.Maybe Core.Bool)
trainingSpecification_supportsDistributedTraining = Lens.lens (\TrainingSpecification' {supportsDistributedTraining} -> supportsDistributedTraining) (\s@TrainingSpecification' {} a -> s {supportsDistributedTraining = a} :: TrainingSpecification)

-- | A list of the metrics that the algorithm emits that can be used as the
-- objective metric in a hyperparameter tuning job.
trainingSpecification_supportedTuningJobObjectiveMetrics :: Lens.Lens' TrainingSpecification (Core.Maybe [HyperParameterTuningJobObjective])
trainingSpecification_supportedTuningJobObjectiveMetrics = Lens.lens (\TrainingSpecification' {supportedTuningJobObjectiveMetrics} -> supportedTuningJobObjectiveMetrics) (\s@TrainingSpecification' {} a -> s {supportedTuningJobObjectiveMetrics = a} :: TrainingSpecification) Core.. Lens.mapping Lens._Coerce

-- | The Amazon ECR registry path of the Docker image that contains the
-- training algorithm.
trainingSpecification_trainingImage :: Lens.Lens' TrainingSpecification Core.Text
trainingSpecification_trainingImage = Lens.lens (\TrainingSpecification' {trainingImage} -> trainingImage) (\s@TrainingSpecification' {} a -> s {trainingImage = a} :: TrainingSpecification)

-- | A list of the instance types that this algorithm can use for training.
trainingSpecification_supportedTrainingInstanceTypes :: Lens.Lens' TrainingSpecification [TrainingInstanceType]
trainingSpecification_supportedTrainingInstanceTypes = Lens.lens (\TrainingSpecification' {supportedTrainingInstanceTypes} -> supportedTrainingInstanceTypes) (\s@TrainingSpecification' {} a -> s {supportedTrainingInstanceTypes = a} :: TrainingSpecification) Core.. Lens._Coerce

-- | A list of @ChannelSpecification@ objects, which specify the input
-- sources to be used by the algorithm.
trainingSpecification_trainingChannels :: Lens.Lens' TrainingSpecification (Core.NonEmpty ChannelSpecification)
trainingSpecification_trainingChannels = Lens.lens (\TrainingSpecification' {trainingChannels} -> trainingChannels) (\s@TrainingSpecification' {} a -> s {trainingChannels = a} :: TrainingSpecification) Core.. Lens._Coerce

instance Core.FromJSON TrainingSpecification where
  parseJSON =
    Core.withObject
      "TrainingSpecification"
      ( \x ->
          TrainingSpecification'
            Core.<$> ( x Core..:? "SupportedHyperParameters"
                         Core..!= Core.mempty
                     )
            Core.<*> (x Core..:? "MetricDefinitions" Core..!= Core.mempty)
            Core.<*> (x Core..:? "TrainingImageDigest")
            Core.<*> (x Core..:? "SupportsDistributedTraining")
            Core.<*> ( x Core..:? "SupportedTuningJobObjectiveMetrics"
                         Core..!= Core.mempty
                     )
            Core.<*> (x Core..: "TrainingImage")
            Core.<*> ( x Core..:? "SupportedTrainingInstanceTypes"
                         Core..!= Core.mempty
                     )
            Core.<*> (x Core..: "TrainingChannels")
      )

instance Core.Hashable TrainingSpecification

instance Core.NFData TrainingSpecification

instance Core.ToJSON TrainingSpecification where
  toJSON TrainingSpecification' {..} =
    Core.object
      ( Core.catMaybes
          [ ("SupportedHyperParameters" Core..=)
              Core.<$> supportedHyperParameters,
            ("MetricDefinitions" Core..=)
              Core.<$> metricDefinitions,
            ("TrainingImageDigest" Core..=)
              Core.<$> trainingImageDigest,
            ("SupportsDistributedTraining" Core..=)
              Core.<$> supportsDistributedTraining,
            ("SupportedTuningJobObjectiveMetrics" Core..=)
              Core.<$> supportedTuningJobObjectiveMetrics,
            Core.Just ("TrainingImage" Core..= trainingImage),
            Core.Just
              ( "SupportedTrainingInstanceTypes"
                  Core..= supportedTrainingInstanceTypes
              ),
            Core.Just
              ("TrainingChannels" Core..= trainingChannels)
          ]
      )
