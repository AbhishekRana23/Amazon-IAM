{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE StrictData #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.IAM.UpdateSAMLProvider
-- Copyright   : (c) 2013-2021 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Updates the metadata document for an existing SAML provider resource
-- object.
--
-- This operation requires
-- <https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html Signature Version 4>.
module Network.AWS.IAM.UpdateSAMLProvider
  ( -- * Creating a Request
    UpdateSAMLProvider (..),
    newUpdateSAMLProvider,

    -- * Request Lenses
    updateSAMLProvider_sAMLMetadataDocument,
    updateSAMLProvider_sAMLProviderArn,

    -- * Destructuring the Response
    UpdateSAMLProviderResponse (..),
    newUpdateSAMLProviderResponse,

    -- * Response Lenses
    updateSAMLProviderResponse_sAMLProviderArn,
    updateSAMLProviderResponse_httpStatus,
  )
where

import qualified Network.AWS.Core as Core
import Network.AWS.IAM.Types
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Request as Request
import qualified Network.AWS.Response as Response

-- | /See:/ 'newUpdateSAMLProvider' smart constructor.
data UpdateSAMLProvider = UpdateSAMLProvider'
  { -- | An XML document generated by an identity provider (IdP) that supports
    -- SAML 2.0. The document includes the issuer\'s name, expiration
    -- information, and keys that can be used to validate the SAML
    -- authentication response (assertions) that are received from the IdP. You
    -- must generate the metadata document using the identity management
    -- software that is used as your organization\'s IdP.
    sAMLMetadataDocument :: Core.Text,
    -- | The Amazon Resource Name (ARN) of the SAML provider to update.
    --
    -- For more information about ARNs, see
    -- <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html Amazon Resource Names (ARNs)>
    -- in the /AWS General Reference/.
    sAMLProviderArn :: Core.Text
  }
  deriving (Core.Eq, Core.Read, Core.Show, Core.Generic)

-- |
-- Create a value of 'UpdateSAMLProvider' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'sAMLMetadataDocument', 'updateSAMLProvider_sAMLMetadataDocument' - An XML document generated by an identity provider (IdP) that supports
-- SAML 2.0. The document includes the issuer\'s name, expiration
-- information, and keys that can be used to validate the SAML
-- authentication response (assertions) that are received from the IdP. You
-- must generate the metadata document using the identity management
-- software that is used as your organization\'s IdP.
--
-- 'sAMLProviderArn', 'updateSAMLProvider_sAMLProviderArn' - The Amazon Resource Name (ARN) of the SAML provider to update.
--
-- For more information about ARNs, see
-- <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html Amazon Resource Names (ARNs)>
-- in the /AWS General Reference/.
newUpdateSAMLProvider ::
  -- | 'sAMLMetadataDocument'
  Core.Text ->
  -- | 'sAMLProviderArn'
  Core.Text ->
  UpdateSAMLProvider
newUpdateSAMLProvider
  pSAMLMetadataDocument_
  pSAMLProviderArn_ =
    UpdateSAMLProvider'
      { sAMLMetadataDocument =
          pSAMLMetadataDocument_,
        sAMLProviderArn = pSAMLProviderArn_
      }

-- | An XML document generated by an identity provider (IdP) that supports
-- SAML 2.0. The document includes the issuer\'s name, expiration
-- information, and keys that can be used to validate the SAML
-- authentication response (assertions) that are received from the IdP. You
-- must generate the metadata document using the identity management
-- software that is used as your organization\'s IdP.
updateSAMLProvider_sAMLMetadataDocument :: Lens.Lens' UpdateSAMLProvider Core.Text
updateSAMLProvider_sAMLMetadataDocument = Lens.lens (\UpdateSAMLProvider' {sAMLMetadataDocument} -> sAMLMetadataDocument) (\s@UpdateSAMLProvider' {} a -> s {sAMLMetadataDocument = a} :: UpdateSAMLProvider)

-- | The Amazon Resource Name (ARN) of the SAML provider to update.
--
-- For more information about ARNs, see
-- <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html Amazon Resource Names (ARNs)>
-- in the /AWS General Reference/.
updateSAMLProvider_sAMLProviderArn :: Lens.Lens' UpdateSAMLProvider Core.Text
updateSAMLProvider_sAMLProviderArn = Lens.lens (\UpdateSAMLProvider' {sAMLProviderArn} -> sAMLProviderArn) (\s@UpdateSAMLProvider' {} a -> s {sAMLProviderArn = a} :: UpdateSAMLProvider)

instance Core.AWSRequest UpdateSAMLProvider where
  type
    AWSResponse UpdateSAMLProvider =
      UpdateSAMLProviderResponse
  request = Request.postQuery defaultService
  response =
    Response.receiveXMLWrapper
      "UpdateSAMLProviderResult"
      ( \s h x ->
          UpdateSAMLProviderResponse'
            Core.<$> (x Core..@? "SAMLProviderArn")
            Core.<*> (Core.pure (Core.fromEnum s))
      )

instance Core.Hashable UpdateSAMLProvider

instance Core.NFData UpdateSAMLProvider

instance Core.ToHeaders UpdateSAMLProvider where
  toHeaders = Core.const Core.mempty

instance Core.ToPath UpdateSAMLProvider where
  toPath = Core.const "/"

instance Core.ToQuery UpdateSAMLProvider where
  toQuery UpdateSAMLProvider' {..} =
    Core.mconcat
      [ "Action"
          Core.=: ("UpdateSAMLProvider" :: Core.ByteString),
        "Version" Core.=: ("2010-05-08" :: Core.ByteString),
        "SAMLMetadataDocument" Core.=: sAMLMetadataDocument,
        "SAMLProviderArn" Core.=: sAMLProviderArn
      ]

-- | Contains the response to a successful UpdateSAMLProvider request.
--
-- /See:/ 'newUpdateSAMLProviderResponse' smart constructor.
data UpdateSAMLProviderResponse = UpdateSAMLProviderResponse'
  { -- | The Amazon Resource Name (ARN) of the SAML provider that was updated.
    sAMLProviderArn :: Core.Maybe Core.Text,
    -- | The response's http status code.
    httpStatus :: Core.Int
  }
  deriving (Core.Eq, Core.Read, Core.Show, Core.Generic)

-- |
-- Create a value of 'UpdateSAMLProviderResponse' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'sAMLProviderArn', 'updateSAMLProviderResponse_sAMLProviderArn' - The Amazon Resource Name (ARN) of the SAML provider that was updated.
--
-- 'httpStatus', 'updateSAMLProviderResponse_httpStatus' - The response's http status code.
newUpdateSAMLProviderResponse ::
  -- | 'httpStatus'
  Core.Int ->
  UpdateSAMLProviderResponse
newUpdateSAMLProviderResponse pHttpStatus_ =
  UpdateSAMLProviderResponse'
    { sAMLProviderArn =
        Core.Nothing,
      httpStatus = pHttpStatus_
    }

-- | The Amazon Resource Name (ARN) of the SAML provider that was updated.
updateSAMLProviderResponse_sAMLProviderArn :: Lens.Lens' UpdateSAMLProviderResponse (Core.Maybe Core.Text)
updateSAMLProviderResponse_sAMLProviderArn = Lens.lens (\UpdateSAMLProviderResponse' {sAMLProviderArn} -> sAMLProviderArn) (\s@UpdateSAMLProviderResponse' {} a -> s {sAMLProviderArn = a} :: UpdateSAMLProviderResponse)

-- | The response's http status code.
updateSAMLProviderResponse_httpStatus :: Lens.Lens' UpdateSAMLProviderResponse Core.Int
updateSAMLProviderResponse_httpStatus = Lens.lens (\UpdateSAMLProviderResponse' {httpStatus} -> httpStatus) (\s@UpdateSAMLProviderResponse' {} a -> s {httpStatus = a} :: UpdateSAMLProviderResponse)

instance Core.NFData UpdateSAMLProviderResponse
