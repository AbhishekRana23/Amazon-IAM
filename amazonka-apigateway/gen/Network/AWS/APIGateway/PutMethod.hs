{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE StrictData #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.APIGateway.PutMethod
-- Copyright   : (c) 2013-2021 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Add a method to an existing Resource resource.
module Network.AWS.APIGateway.PutMethod
  ( -- * Creating a Request
    PutMethod (..),
    newPutMethod,

    -- * Request Lenses
    putMethod_apiKeyRequired,
    putMethod_requestModels,
    putMethod_operationName,
    putMethod_requestValidatorId,
    putMethod_authorizerId,
    putMethod_requestParameters,
    putMethod_authorizationScopes,
    putMethod_restApiId,
    putMethod_resourceId,
    putMethod_httpMethod,
    putMethod_authorizationType,

    -- * Destructuring the Response
    Method (..),
    newMethod,

    -- * Response Lenses
    method_httpMethod,
    method_methodIntegration,
    method_apiKeyRequired,
    method_authorizationType,
    method_requestModels,
    method_operationName,
    method_requestValidatorId,
    method_methodResponses,
    method_authorizerId,
    method_requestParameters,
    method_authorizationScopes,
  )
where

import Network.AWS.APIGateway.Types
import qualified Network.AWS.Core as Core
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Request as Request
import qualified Network.AWS.Response as Response

-- | Request to add a method to an existing Resource resource.
--
-- /See:/ 'newPutMethod' smart constructor.
data PutMethod = PutMethod'
  { -- | Specifies whether the method required a valid ApiKey.
    apiKeyRequired :: Core.Maybe Core.Bool,
    -- | Specifies the Model resources used for the request\'s content type.
    -- Request models are represented as a key\/value map, with a content type
    -- as the key and a Model name as the value.
    requestModels :: Core.Maybe (Core.HashMap Core.Text Core.Text),
    -- | A human-friendly operation identifier for the method. For example, you
    -- can assign the @operationName@ of @ListPets@ for the @GET \/pets@ method
    -- in the @PetStore@ example.
    operationName :: Core.Maybe Core.Text,
    -- | The identifier of a RequestValidator for validating the method request.
    requestValidatorId :: Core.Maybe Core.Text,
    -- | Specifies the identifier of an Authorizer to use on this Method, if the
    -- type is CUSTOM or COGNITO_USER_POOLS. The authorizer identifier is
    -- generated by API Gateway when you created the authorizer.
    authorizerId :: Core.Maybe Core.Text,
    -- | A key-value map defining required or optional method request parameters
    -- that can be accepted by API Gateway. A key defines a method request
    -- parameter name matching the pattern of
    -- @method.request.{location}.{name}@, where @location@ is @querystring@,
    -- @path@, or @header@ and @name@ is a valid and unique parameter name. The
    -- value associated with the key is a Boolean flag indicating whether the
    -- parameter is required (@true@) or optional (@false@). The method request
    -- parameter names defined here are available in Integration to be mapped
    -- to integration request parameters or body-mapping templates.
    requestParameters :: Core.Maybe (Core.HashMap Core.Text Core.Bool),
    -- | A list of authorization scopes configured on the method. The scopes are
    -- used with a @COGNITO_USER_POOLS@ authorizer to authorize the method
    -- invocation. The authorization works by matching the method scopes
    -- against the scopes parsed from the access token in the incoming request.
    -- The method invocation is authorized if any method scopes matches a
    -- claimed scope in the access token. Otherwise, the invocation is not
    -- authorized. When the method scope is configured, the client must provide
    -- an access token instead of an identity token for authorization purposes.
    authorizationScopes :: Core.Maybe [Core.Text],
    -- | [Required] The string identifier of the associated RestApi.
    restApiId :: Core.Text,
    -- | [Required] The Resource identifier for the new Method resource.
    resourceId :: Core.Text,
    -- | [Required] Specifies the method request\'s HTTP method type.
    httpMethod :: Core.Text,
    -- | [Required] The method\'s authorization type. Valid values are @NONE@ for
    -- open access, @AWS_IAM@ for using AWS IAM permissions, @CUSTOM@ for using
    -- a custom authorizer, or @COGNITO_USER_POOLS@ for using a Cognito user
    -- pool.
    authorizationType :: Core.Text
  }
  deriving (Core.Eq, Core.Read, Core.Show, Core.Generic)

-- |
-- Create a value of 'PutMethod' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'apiKeyRequired', 'putMethod_apiKeyRequired' - Specifies whether the method required a valid ApiKey.
--
-- 'requestModels', 'putMethod_requestModels' - Specifies the Model resources used for the request\'s content type.
-- Request models are represented as a key\/value map, with a content type
-- as the key and a Model name as the value.
--
-- 'operationName', 'putMethod_operationName' - A human-friendly operation identifier for the method. For example, you
-- can assign the @operationName@ of @ListPets@ for the @GET \/pets@ method
-- in the @PetStore@ example.
--
-- 'requestValidatorId', 'putMethod_requestValidatorId' - The identifier of a RequestValidator for validating the method request.
--
-- 'authorizerId', 'putMethod_authorizerId' - Specifies the identifier of an Authorizer to use on this Method, if the
-- type is CUSTOM or COGNITO_USER_POOLS. The authorizer identifier is
-- generated by API Gateway when you created the authorizer.
--
-- 'requestParameters', 'putMethod_requestParameters' - A key-value map defining required or optional method request parameters
-- that can be accepted by API Gateway. A key defines a method request
-- parameter name matching the pattern of
-- @method.request.{location}.{name}@, where @location@ is @querystring@,
-- @path@, or @header@ and @name@ is a valid and unique parameter name. The
-- value associated with the key is a Boolean flag indicating whether the
-- parameter is required (@true@) or optional (@false@). The method request
-- parameter names defined here are available in Integration to be mapped
-- to integration request parameters or body-mapping templates.
--
-- 'authorizationScopes', 'putMethod_authorizationScopes' - A list of authorization scopes configured on the method. The scopes are
-- used with a @COGNITO_USER_POOLS@ authorizer to authorize the method
-- invocation. The authorization works by matching the method scopes
-- against the scopes parsed from the access token in the incoming request.
-- The method invocation is authorized if any method scopes matches a
-- claimed scope in the access token. Otherwise, the invocation is not
-- authorized. When the method scope is configured, the client must provide
-- an access token instead of an identity token for authorization purposes.
--
-- 'restApiId', 'putMethod_restApiId' - [Required] The string identifier of the associated RestApi.
--
-- 'resourceId', 'putMethod_resourceId' - [Required] The Resource identifier for the new Method resource.
--
-- 'httpMethod', 'putMethod_httpMethod' - [Required] Specifies the method request\'s HTTP method type.
--
-- 'authorizationType', 'putMethod_authorizationType' - [Required] The method\'s authorization type. Valid values are @NONE@ for
-- open access, @AWS_IAM@ for using AWS IAM permissions, @CUSTOM@ for using
-- a custom authorizer, or @COGNITO_USER_POOLS@ for using a Cognito user
-- pool.
newPutMethod ::
  -- | 'restApiId'
  Core.Text ->
  -- | 'resourceId'
  Core.Text ->
  -- | 'httpMethod'
  Core.Text ->
  -- | 'authorizationType'
  Core.Text ->
  PutMethod
newPutMethod
  pRestApiId_
  pResourceId_
  pHttpMethod_
  pAuthorizationType_ =
    PutMethod'
      { apiKeyRequired = Core.Nothing,
        requestModels = Core.Nothing,
        operationName = Core.Nothing,
        requestValidatorId = Core.Nothing,
        authorizerId = Core.Nothing,
        requestParameters = Core.Nothing,
        authorizationScopes = Core.Nothing,
        restApiId = pRestApiId_,
        resourceId = pResourceId_,
        httpMethod = pHttpMethod_,
        authorizationType = pAuthorizationType_
      }

-- | Specifies whether the method required a valid ApiKey.
putMethod_apiKeyRequired :: Lens.Lens' PutMethod (Core.Maybe Core.Bool)
putMethod_apiKeyRequired = Lens.lens (\PutMethod' {apiKeyRequired} -> apiKeyRequired) (\s@PutMethod' {} a -> s {apiKeyRequired = a} :: PutMethod)

-- | Specifies the Model resources used for the request\'s content type.
-- Request models are represented as a key\/value map, with a content type
-- as the key and a Model name as the value.
putMethod_requestModels :: Lens.Lens' PutMethod (Core.Maybe (Core.HashMap Core.Text Core.Text))
putMethod_requestModels = Lens.lens (\PutMethod' {requestModels} -> requestModels) (\s@PutMethod' {} a -> s {requestModels = a} :: PutMethod) Core.. Lens.mapping Lens._Coerce

-- | A human-friendly operation identifier for the method. For example, you
-- can assign the @operationName@ of @ListPets@ for the @GET \/pets@ method
-- in the @PetStore@ example.
putMethod_operationName :: Lens.Lens' PutMethod (Core.Maybe Core.Text)
putMethod_operationName = Lens.lens (\PutMethod' {operationName} -> operationName) (\s@PutMethod' {} a -> s {operationName = a} :: PutMethod)

-- | The identifier of a RequestValidator for validating the method request.
putMethod_requestValidatorId :: Lens.Lens' PutMethod (Core.Maybe Core.Text)
putMethod_requestValidatorId = Lens.lens (\PutMethod' {requestValidatorId} -> requestValidatorId) (\s@PutMethod' {} a -> s {requestValidatorId = a} :: PutMethod)

-- | Specifies the identifier of an Authorizer to use on this Method, if the
-- type is CUSTOM or COGNITO_USER_POOLS. The authorizer identifier is
-- generated by API Gateway when you created the authorizer.
putMethod_authorizerId :: Lens.Lens' PutMethod (Core.Maybe Core.Text)
putMethod_authorizerId = Lens.lens (\PutMethod' {authorizerId} -> authorizerId) (\s@PutMethod' {} a -> s {authorizerId = a} :: PutMethod)

-- | A key-value map defining required or optional method request parameters
-- that can be accepted by API Gateway. A key defines a method request
-- parameter name matching the pattern of
-- @method.request.{location}.{name}@, where @location@ is @querystring@,
-- @path@, or @header@ and @name@ is a valid and unique parameter name. The
-- value associated with the key is a Boolean flag indicating whether the
-- parameter is required (@true@) or optional (@false@). The method request
-- parameter names defined here are available in Integration to be mapped
-- to integration request parameters or body-mapping templates.
putMethod_requestParameters :: Lens.Lens' PutMethod (Core.Maybe (Core.HashMap Core.Text Core.Bool))
putMethod_requestParameters = Lens.lens (\PutMethod' {requestParameters} -> requestParameters) (\s@PutMethod' {} a -> s {requestParameters = a} :: PutMethod) Core.. Lens.mapping Lens._Coerce

-- | A list of authorization scopes configured on the method. The scopes are
-- used with a @COGNITO_USER_POOLS@ authorizer to authorize the method
-- invocation. The authorization works by matching the method scopes
-- against the scopes parsed from the access token in the incoming request.
-- The method invocation is authorized if any method scopes matches a
-- claimed scope in the access token. Otherwise, the invocation is not
-- authorized. When the method scope is configured, the client must provide
-- an access token instead of an identity token for authorization purposes.
putMethod_authorizationScopes :: Lens.Lens' PutMethod (Core.Maybe [Core.Text])
putMethod_authorizationScopes = Lens.lens (\PutMethod' {authorizationScopes} -> authorizationScopes) (\s@PutMethod' {} a -> s {authorizationScopes = a} :: PutMethod) Core.. Lens.mapping Lens._Coerce

-- | [Required] The string identifier of the associated RestApi.
putMethod_restApiId :: Lens.Lens' PutMethod Core.Text
putMethod_restApiId = Lens.lens (\PutMethod' {restApiId} -> restApiId) (\s@PutMethod' {} a -> s {restApiId = a} :: PutMethod)

-- | [Required] The Resource identifier for the new Method resource.
putMethod_resourceId :: Lens.Lens' PutMethod Core.Text
putMethod_resourceId = Lens.lens (\PutMethod' {resourceId} -> resourceId) (\s@PutMethod' {} a -> s {resourceId = a} :: PutMethod)

-- | [Required] Specifies the method request\'s HTTP method type.
putMethod_httpMethod :: Lens.Lens' PutMethod Core.Text
putMethod_httpMethod = Lens.lens (\PutMethod' {httpMethod} -> httpMethod) (\s@PutMethod' {} a -> s {httpMethod = a} :: PutMethod)

-- | [Required] The method\'s authorization type. Valid values are @NONE@ for
-- open access, @AWS_IAM@ for using AWS IAM permissions, @CUSTOM@ for using
-- a custom authorizer, or @COGNITO_USER_POOLS@ for using a Cognito user
-- pool.
putMethod_authorizationType :: Lens.Lens' PutMethod Core.Text
putMethod_authorizationType = Lens.lens (\PutMethod' {authorizationType} -> authorizationType) (\s@PutMethod' {} a -> s {authorizationType = a} :: PutMethod)

instance Core.AWSRequest PutMethod where
  type AWSResponse PutMethod = Method
  request = Request.putJSON defaultService
  response =
    Response.receiveJSON
      (\s h x -> Core.eitherParseJSON x)

instance Core.Hashable PutMethod

instance Core.NFData PutMethod

instance Core.ToHeaders PutMethod where
  toHeaders =
    Core.const
      ( Core.mconcat
          [ "Accept"
              Core.=# ("application/json" :: Core.ByteString)
          ]
      )

instance Core.ToJSON PutMethod where
  toJSON PutMethod' {..} =
    Core.object
      ( Core.catMaybes
          [ ("apiKeyRequired" Core..=) Core.<$> apiKeyRequired,
            ("requestModels" Core..=) Core.<$> requestModels,
            ("operationName" Core..=) Core.<$> operationName,
            ("requestValidatorId" Core..=)
              Core.<$> requestValidatorId,
            ("authorizerId" Core..=) Core.<$> authorizerId,
            ("requestParameters" Core..=)
              Core.<$> requestParameters,
            ("authorizationScopes" Core..=)
              Core.<$> authorizationScopes,
            Core.Just
              ("authorizationType" Core..= authorizationType)
          ]
      )

instance Core.ToPath PutMethod where
  toPath PutMethod' {..} =
    Core.mconcat
      [ "/restapis/",
        Core.toBS restApiId,
        "/resources/",
        Core.toBS resourceId,
        "/methods/",
        Core.toBS httpMethod
      ]

instance Core.ToQuery PutMethod where
  toQuery = Core.const Core.mempty
